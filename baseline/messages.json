{"2023-04-17T21:58:12.550995": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "What is an array?", "isBot": false, "highlightedText": "What is an <span class=\"entity-operation\">array<span class=\"label\">[operation]</span></span>?", "intent": "code_search"}, {"id": 1, "text": "Question: indexing in numpy nd-array with a score of 93.50%", "isBot": true, "highlightedText": "", "score": "93.50%", "isRemoved": true}, {"id": 2, "text": "```array[..., i] = something\n```", "isBot": true, "highlightedText": "", "score": "93.50%", "liked": false, "disliked": true, "isRemoved": true}, {"id": 3, "text": "Question: Python: how can I check if the key of an dictionary exists? with a score of 93.25%", "isBot": true, "highlightedText": "", "score": "93.25%"}, {"id": 4, "text": "```if key in array:\n  # do something\n```", "isBot": true, "highlightedText": "", "score": "93.25%", "liked": true, "disliked": false}, {"id": 5, "text": "Question: python - is it possible to extend the set of things that xml-rpc can serialize? with a score of 92.03%", "isBot": true, "highlightedText": "", "score": "92.03%"}, {"id": 6, "text": "```<array>.shape\n<array>.dtype\n<array>.flat\n```", "isBot": true, "highlightedText": "", "score": "92.03%", "liked": true, "disliked": false}, {"id": 7, "text": "Question: How to change all True values in list on False and vice versa with a score of 91.96%", "isBot": true, "highlightedText": "", "score": "91.96%"}, {"id": 8, "text": "```array = [not elem for elem in array]\n```", "isBot": true, "highlightedText": "", "score": "91.96%"}, {"id": 9, "text": "Question: Print space after each word with a score of 91.91%", "isBot": true, "highlightedText": "", "score": "91.91%"}, {"id": 10, "text": "```values = [\"this\", \"is\", \"your\", \"array\"]\nresult = \" \".join(values)\n```", "isBot": true, "highlightedText": "", "score": "91.91%"}, {"id": 11, "text": "Question: increasing expressiveness in array elements test with a score of 91.82%", "isBot": true, "highlightedText": "", "score": "91.82%"}, {"id": 12, "text": "```all(is_okay(s) for s in some_array)\n```", "isBot": true, "highlightedText": "", "score": "91.82%"}, {"id": 13, "text": "Question: computing the occurences of a number in a list with recursion with a score of 91.77%", "isBot": true, "highlightedText": "", "score": "91.77%"}, {"id": 14, "text": "```def array11(arr, index):\n    if index == len(arr):\n        return 0\n    return (arr[index] == 11) + array11(arr, index + 1)\n```", "isBot": true, "highlightedText": "", "score": "91.77%"}, {"id": 15, "text": "Question: Most efficient way to reverse a numpy array with a score of 91.57%", "isBot": true, "highlightedText": "", "score": "91.57%"}, {"id": 16, "text": "```arr = np.array(some_sequence)\nreversed_arr = arr[::-1]\n\ndo_something(arr)\nlook_at(reversed_arr)\ndo_something_else(arr)\nlook_at(reversed_arr)\n```", "isBot": true, "highlightedText": "", "score": "91.57%"}, {"id": 17, "text": "Question: Counting array elements in Python with a score of 91.52%", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 18, "text": "```len(myArray)\n```", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 19, "text": "Question: Python char array declaration with a score of 91.52%", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 20, "text": "```myArray = \"\\0\" * 100\n```", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 21, "text": "I classified your question with the following intent: code_search And found these entities: array: operation", "isBot": true}], "2023-04-18T15:57:17.148447": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "What is an array?", "isBot": false, "highlightedText": ""}, {"id": 1, "text": "What is an array?", "isBot": false, "highlightedText": "What is an <span class=\"entity-operation\">array<span class=\"label\">[operation]</span></span>?", "intent": "code_search"}, {"id": 2, "text": "Question: indexing in numpy nd-array with a score of 93.50%", "isBot": true, "highlightedText": "", "score": "93.50%"}, {"id": 3, "text": "```array[..., i] = something\n```", "isBot": true, "highlightedText": "", "score": "93.50%", "liked": true, "disliked": false}, {"id": 4, "text": "Question: Python: how can I check if the key of an dictionary exists? with a score of 93.25%", "isBot": true, "highlightedText": "", "score": "93.25%"}, {"id": 5, "text": "```if key in array:\n  # do something\n```", "isBot": true, "highlightedText": "", "score": "93.25%", "liked": true, "disliked": false}, {"id": 6, "text": "Question: python - is it possible to extend the set of things that xml-rpc can serialize? with a score of 92.03%", "isBot": true, "highlightedText": "", "score": "92.03%", "isRemoved": true}, {"id": 7, "text": "```<array>.shape\n<array>.dtype\n<array>.flat\n```", "isBot": true, "highlightedText": "", "score": "92.03%", "liked": false, "disliked": true, "feedback": "This code snippet was not relevant as the question did not mention an array.", "isRemoved": true}, {"id": 8, "text": "Question: How to change all True values in list on False and vice versa with a score of 91.96%", "isBot": true, "highlightedText": "", "score": "91.96%"}, {"id": 9, "text": "```array = [not elem for elem in array]\n```", "isBot": true, "highlightedText": "", "score": "91.96%"}, {"id": 10, "text": "Question: Print space after each word with a score of 91.91%", "isBot": true, "highlightedText": "", "score": "91.91%"}, {"id": 11, "text": "```values = [\"this\", \"is\", \"your\", \"array\"]\nresult = \" \".join(values)\n```", "isBot": true, "highlightedText": "", "score": "91.91%"}, {"id": 12, "text": "Question: increasing expressiveness in array elements test with a score of 91.82%", "isBot": true, "highlightedText": "", "score": "91.82%"}, {"id": 13, "text": "```all(is_okay(s) for s in some_array)\n```", "isBot": true, "highlightedText": "", "score": "91.82%"}, {"id": 14, "text": "Question: computing the occurences of a number in a list with recursion with a score of 91.77%", "isBot": true, "highlightedText": "", "score": "91.77%"}, {"id": 15, "text": "```def array11(arr, index):\n    if index == len(arr):\n        return 0\n    return (arr[index] == 11) + array11(arr, index + 1)\n```", "isBot": true, "highlightedText": "", "score": "91.77%"}, {"id": 16, "text": "Question: Most efficient way to reverse a numpy array with a score of 91.57%", "isBot": true, "highlightedText": "", "score": "91.57%"}, {"id": 17, "text": "```arr = np.array(some_sequence)\nreversed_arr = arr[::-1]\n\ndo_something(arr)\nlook_at(reversed_arr)\ndo_something_else(arr)\nlook_at(reversed_arr)\n```", "isBot": true, "highlightedText": "", "score": "91.57%"}, {"id": 18, "text": "Question: Counting array elements in Python with a score of 91.52%", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 19, "text": "```len(myArray)\n```", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 20, "text": "Question: Python char array declaration with a score of 91.52%", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 21, "text": "```myArray = \"\\0\" * 100\n```", "isBot": true, "highlightedText": "", "score": "91.52%"}, {"id": 22, "text": "I classified your question with the following intent: code_search And found these entities: array: operation", "isBot": true}], "2023-05-03T19:53:38.909327": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "How many days till a certain date?", "isBot": false, "highlightedText": "How many days till a certain <span class=\"entity-data_structure\">date<span class=\"label\">[data_structure]</span></span>?", "intent": "code_search"}, {"id": 1, "text": "Question: Dates difference in days as a fraction with a score of 94.98%", "isBot": true, "highlightedText": "", "score": "94.98%"}, {"id": 2, "text": "```from datetime import timedelta\n\ndef get_days_between(datePast, dateFuture):\n   difference = dateFuture - datePast\n   return difference.total_seconds() / timedelta(days=1).total_seconds()\n```", "isBot": true, "highlightedText": "", "score": "94.98%"}, {"id": 3, "text": "Question: Plotting specific number of days from a csv in python with a score of 94.68%", "isBot": true, "highlightedText": "", "score": "94.68%"}, {"id": 4, "text": "```import datetime\ndate_to = max(dates)\ndate_from = date_to - datetime.timedelta(days=num_days)\nitem_count = len([d for d in dates if d >= date_from])\n```", "isBot": true, "highlightedText": "", "score": "94.68%"}, {"id": 5, "text": "Question: Python: Given a Date and Weekday find the date of the next occurrence of a given weekday with a score of 94.57%", "isBot": true, "highlightedText": "", "score": "94.57%"}, {"id": 6, "text": "```from datetime import date, timedelta\n...\nn = (next_day - d.weekday()) % 7 # mod-7 ensures we don't go backward in time\nnext_run_date = d + timedelta(days=n)\n```", "isBot": true, "highlightedText": "", "score": "94.57%"}, {"id": 7, "text": "Question: How to filter an object based on a datetime range in python (Django) with a score of 94.20%", "isBot": true, "highlightedText": "", "score": "94.20%", "isRemoved": true}, {"id": 8, "text": "```start_date = end_date - datetime.timedelta(days=14)\n```", "isBot": true, "highlightedText": "", "score": "94.20%", "liked": false, "disliked": true, "feedback": "I don't understand the parameters you provided", "isRemoved": true}, {"id": 9, "text": "Question: How can I subtract a day from a Python date? with a score of 94.19%", "isBot": true, "highlightedText": "", "score": "94.19%"}, {"id": 10, "text": "```from datetime import date, timedelta\n\nd = date.today() - timedelta(days=days_to_subtract)\n```", "isBot": true, "highlightedText": "", "score": "94.19%", "liked": true, "disliked": false}, {"id": 11, "text": "Question: Creating a range of dates in Python with a score of 94.16%", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 12, "text": "```base = datetime.datetime.today()\ndate_list = [base - datetime.timedelta(days=x) for x in range(0, numdays)]\n```", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 13, "text": "Question: Converting '4 days ago' etc. to the actual dates with a score of 94.12%", "isBot": true, "highlightedText": "", "score": "94.12%"}, {"id": 14, "text": "```d = date.today() - timedelta(days_to_subtract)\n```", "isBot": true, "highlightedText": "", "score": "94.12%"}, {"id": 15, "text": "Question: Difference between two dates? with a score of 93.96%", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 16, "text": "```from datetime import datetime\n\ndef days_between(d1, d2):\n    d1 = datetime.strptime(d1, \"%Y-%m-%d\")\n    d2 = datetime.strptime(d2, \"%Y-%m-%d\")\n    return abs((d2 - d1).days)\n```", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 17, "text": "Question: How to calculate past 1 day interval from current time in sqlalchemy with a score of 93.93%", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 18, "text": "```from datetime import datetime, timedelta\n\none_day_interval_before = datetime.now() - timedelta(days=1)\n```", "isBot": true, "highlightedText": "", "score": "93.93%", "liked": true, "disliked": false}, {"id": 19, "text": "Question: Replace function arguments name by local variables in Python with a score of 93.84%", "isBot": true, "highlightedText": "", "score": "93.84%"}, {"id": 20, "text": "```args = {'days':1}\ndatetime.timedelta(**args)\n```", "isBot": true, "highlightedText": "", "score": "93.84%"}, {"id": 21, "text": "I classified your question with the following intent: code_search And found these entities: date: data_structure", "isBot": true}, {"id": 22, "text": "What are the first 10 towns in the Netherland in descending order of number of inhabitants?", "isBot": false, "highlightedText": "What are the <span class=\"entity-operation\">first 10<span class=\"label\">[operation]</span></span> towns in the Netherland in descending order of <span class=\"entity-query\">number<span class=\"label\">[query]</span></span> of inhabitants?", "intent": "code_concept"}, {"id": 23, "text": "Question: Using Python to count unique list elements of two strings separated by a space with a score of 91.25%", "isBot": true, "highlightedText": "", "score": "91.25%"}, {"id": 24, "text": "```plist = ('burleson both', 'the largemouth', 'the largemouth', 'a 19inch', 'his first')\nplist = [(x, plist.count(x)) for x in set(plist)]\nplist.sort(key=lambda x: x[1], reverse=True)\n```", "isBot": true, "highlightedText": "", "score": "91.25%"}, {"id": 25, "text": "Question: Filtering a django queryset based on computed values with a score of 90.81%", "isBot": true, "highlightedText": "", "score": "90.81%"}, {"id": 26, "text": "```cites = cities.filter(distance_lt=101)\n```", "isBot": true, "highlightedText": "", "score": "90.81%"}, {"id": 27, "text": "Question: sorting strings based on your own values in python with a score of 90.46%", "isBot": true, "highlightedText": "", "score": "90.46%"}, {"id": 28, "text": "```suits = {'queen': 2, 'jack': 1, 'king': 2}\nl = ['queen','jack','king']\nprint sorted(l, key=suits.get)\n```", "isBot": true, "highlightedText": "", "score": "90.46%"}, {"id": 29, "text": "Question: Find least frequent value in dictionary with a score of 90.30%", "isBot": true, "highlightedText": "", "score": "90.30%"}, {"id": 30, "text": "```d={'Alyssa':22, 'Char':25, 'Dan':25, 'Jeff':20, 'Kasey':20, 'Kim':20, 'Mogran':25, 'Ryan':25, 'Stef':22}\nimport collections\nprint collections.Counter(d.values()).most_common()[-1][0]\n22\n```", "isBot": true, "highlightedText": "", "score": "90.30%"}, {"id": 31, "text": "Question: Django order by most frequent value with a score of 90.30%", "isBot": true, "highlightedText": "", "score": "90.30%"}, {"id": 32, "text": "```from django.db.models import Count\nFoodTruck.objects.values_list('name').annotate(truck_count=Count('name')).order_by('-truck_count')\n```", "isBot": true, "highlightedText": "", "score": "90.30%"}, {"id": 33, "text": "Question: How to assign multiple values to multiple keys with a single command with a score of 90.22%", "isBot": true, "highlightedText": "", "score": "90.22%"}, {"id": 34, "text": "```Info[\"City_Name\"].update({\"Population\": 20000, \"Population_Density\": 200})\n```", "isBot": true, "highlightedText": "", "score": "90.22%"}, {"id": 35, "text": "Question: Group by, distinct, count in django with a score of 90.20%", "isBot": true, "highlightedText": "", "score": "90.20%"}, {"id": 36, "text": "```from django.db.models import Count\nUsage.objects.filter(no_of_people_house='4', city='HYDERABAD', nursing_cnt='2ND TIME MOTHER', bucket='BRAND PENETRATION').values('final_category').annotate(responders=Count('responders'))\n```", "isBot": true, "highlightedText": "", "score": "90.20%"}, {"id": 37, "text": "Question: Return a list of race positions without the values with a score of 90.20%", "isBot": true, "highlightedText": "", "score": "90.20%"}, {"id": 38, "text": "```d = {'Dennis': 90.0, 'Alice': 100.0, 'Bob': 101.4389222493041, 'Eva': 94.18226076274071, 'Clare': 111.52090179040226}\n\nprint(sorted(d,key=d.get,reverse=True))\n['Clare', 'Bob', 'Alice', 'Eva', 'Dennis']\n```", "isBot": true, "highlightedText": "", "score": "90.20%"}, {"id": 39, "text": "Question: In Python how do I sort a list of dictionaries by a certain value of the dictionary + alphabetically? with a score of 90.17%", "isBot": true, "highlightedText": "", "score": "90.17%"}, {"id": 40, "text": "```sorted(list_of_dicts, key=lambda d: (d['Name'] == 'TOTAL', d['Name'].lower()))\n```", "isBot": true, "highlightedText": "", "score": "90.17%"}, {"id": 41, "text": "Question: Sort Python list of objects by date with a score of 90.13%", "isBot": true, "highlightedText": "", "score": "90.13%"}, {"id": 42, "text": "```results.sort(key=lambda r: r.person.birthdate)\n```", "isBot": true, "highlightedText": "", "score": "90.13%"}, {"id": 43, "text": "I classified your question with the following intent: code_concept And found these entities: first 10: operation, number: query", "isBot": true}, {"id": 44, "text": "What are the first 10[operation] towns in the Netherlands, ordered in descending order of number[query] of inhabitants?", "isBot": false, "highlightedText": ""}, {"id": 45, "text": "What are the first 10 towns in the Netherlands, ordered in descending order of number of inhabitants?", "isBot": false, "highlightedText": "What are the <span class=\"entity-operation\">first 10<span class=\"label\">[operation]</span></span> towns in the Netherlands, ordered in descending order of <span class=\"entity-query\">number<span class=\"label\">[query]</span></span> of inhabitants?", "intent": "code_concept"}, {"id": 46, "text": "Question: Using Python to count unique list elements of two strings separated by a space with a score of 91.10%", "isBot": true, "highlightedText": "", "score": "91.10%"}, {"id": 47, "text": "```plist = ('burleson both', 'the largemouth', 'the largemouth', 'a 19inch', 'his first')\nplist = [(x, plist.count(x)) for x in set(plist)]\nplist.sort(key=lambda x: x[1], reverse=True)\n```", "isBot": true, "highlightedText": "", "score": "91.10%"}, {"id": 48, "text": "Question: In Python how do I sort a list of dictionaries by a certain value of the dictionary + alphabetically? with a score of 90.70%", "isBot": true, "highlightedText": "", "score": "90.70%"}, {"id": 49, "text": "```sorted(list_of_dicts, key=lambda d: (d['Name'] == 'TOTAL', d['Name'].lower()))\n```", "isBot": true, "highlightedText": "", "score": "90.70%", "liked": true, "disliked": false}, {"id": 50, "text": "Question: how to print a dictionary sorted by a value of a subdictionary? with a score of 90.64%", "isBot": true, "highlightedText": "", "score": "90.64%"}, {"id": 51, "text": "```def sort_by_subdict(dictionary, subdict_key):\n    return sorted(dictionary.items(), key=lambda k_v: k_v[1][subdict_key])\n\nLesson = {'Math':{'Rating':11, 'Desc':'Exercises 14 and 19 page 157', 'TimeLeftTask':7}, 'English':{'Rating':23, 'Desc':'Exercise 5 page 204', 'TimeLeftTask':2}}\nprint(sort_by_subdict(Lesson, 'Rating'))\n```", "isBot": true, "highlightedText": "", "score": "90.64%"}, {"id": 52, "text": "Question: How to sort list of dicts by dict value in pre-defined format? with a score of 90.62%", "isBot": true, "highlightedText": "", "score": "90.62%"}, {"id": 53, "text": "```STATUS_RANK = {\"ACTIVE\": 1, \"DEACTIVE\": 2, \"COMING\": 3}\n\ncourses.sort(key=lambda x: STATUS_RANK[x['status']])\n```", "isBot": true, "highlightedText": "", "score": "90.62%"}, {"id": 54, "text": "Question: How to find string in item of list python with a score of 90.45%", "isBot": true, "highlightedText": "", "score": "90.45%"}, {"id": 55, "text": "```cities = [w.split(',')[0] for w in my_list]\nterm = \"de\"\nresults = [city for city in cities if term in city.lower()]\n```", "isBot": true, "highlightedText": "", "score": "90.45%"}, {"id": 56, "text": "Question: Group by, distinct, count in django with a score of 90.39%", "isBot": true, "highlightedText": "", "score": "90.39%"}, {"id": 57, "text": "```from django.db.models import Count\nUsage.objects.filter(no_of_people_house='4', city='HYDERABAD', nursing_cnt='2ND TIME MOTHER', bucket='BRAND PENETRATION').values('final_category').annotate(responders=Count('responders'))\n```", "isBot": true, "highlightedText": "", "score": "90.39%"}, {"id": 58, "text": "Question: Filtering a django queryset based on computed values with a score of 90.39%", "isBot": true, "highlightedText": "", "score": "90.39%"}, {"id": 59, "text": "```cites = cities.filter(distance_lt=101)\n```", "isBot": true, "highlightedText": "", "score": "90.39%"}, {"id": 60, "text": "Question: Reshaping Pandas Data Frame with a score of 90.33%", "isBot": true, "highlightedText": "", "score": "90.33%"}, {"id": 61, "text": "```import pandas as pd\nrankings = pd.read_html('https://en.wikipedia.org/wiki/Rankings_of_universities_in_the_United_Kingdom', header=0)\nuniversity_guide = rankings[0]\ndf = pd.DataFrame(university_guide.values.reshape((30, 2)), columns=['Rank', 'University'])\ndf = df.sort('Rank').reset_index(drop=True)\nprint df\n```", "isBot": true, "highlightedText": "", "score": "90.33%"}, {"id": 62, "text": "Question: Find least frequent value in dictionary with a score of 90.31%", "isBot": true, "highlightedText": "", "score": "90.31%"}, {"id": 63, "text": "```d={'Alyssa':22, 'Char':25, 'Dan':25, 'Jeff':20, 'Kasey':20, 'Kim':20, 'Mogran':25, 'Ryan':25, 'Stef':22}\nimport collections\nprint collections.Counter(d.values()).most_common()[-1][0]\n22\n```", "isBot": true, "highlightedText": "", "score": "90.31%"}, {"id": 64, "text": "Question: Return a list of race positions without the values with a score of 90.29%", "isBot": true, "highlightedText": "", "score": "90.29%"}, {"id": 65, "text": "```d = {'Dennis': 90.0, 'Alice': 100.0, 'Bob': 101.4389222493041, 'Eva': 94.18226076274071, 'Clare': 111.52090179040226}\n\nprint(sorted(d,key=d.get,reverse=True))\n['Clare', 'Bob', 'Alice', 'Eva', 'Dennis']\n```", "isBot": true, "highlightedText": "", "score": "90.29%"}, {"id": 66, "text": "I classified your question with the following intent: code_concept And found these entities: first 10: operation, number: query", "isBot": true}, {"id": 67, "text": "List the second and last column of a csv-file and save it as a text file", "isBot": false, "highlightedText": "List the second and <span class=\"entity-operation\">last<span class=\"label\">[operation]</span></span> column of a <span class=\"entity-data_structure\">csv-file<span class=\"label\">[data_structure]</span></span> and <span class=\"entity-operation\">save<span class=\"label\">[operation]</span></span> it as a text file", "intent": "code_concept"}, {"id": 68, "text": "Question: Write a list to csv file without looping in python with a score of 95.90%", "isBot": true, "highlightedText": "", "score": "95.90%"}, {"id": 69, "text": "```csv_file.writerows(the_list)\n```", "isBot": true, "highlightedText": "", "score": "95.90%"}, {"id": 70, "text": "Question: Python csv writer / rewrite /overwrite a row or delete all the rows and add a new one with a score of 95.77%", "isBot": true, "highlightedText": "", "score": "95.77%"}, {"id": 71, "text": "```import csv\ncsvOpen = open('filename','w')\nc = = csv.writer(csvOpen, dialect='excel')\nc.writerows([[header1,header2,heaer3],[value1,value2,value3]])\n```", "isBot": true, "highlightedText": "", "score": "95.77%"}, {"id": 72, "text": "Question: Python CSV to list (1-dimensional list) with a score of 95.74%", "isBot": true, "highlightedText": "", "score": "95.74%"}, {"id": 73, "text": "```with open(csv_file, 'r') as csvfile:\n    readcsv = csv.reader(csvfile, delimiter=';')\n    flatlist = (list(readcsv))[0]\n\nprint flatlist\n```", "isBot": true, "highlightedText": "", "score": "95.74%"}, {"id": 74, "text": "Question: Export sqlite3 table to csv or txt file with python with a score of 95.70%", "isBot": true, "highlightedText": "", "score": "95.70%"}, {"id": 75, "text": "```with open('output.csv', 'wb') as f:\n    writer = csv.writer(f)\n    writer.writerow(['Column 1', 'Column 2', ...])\n    writer.writerows(data)\n```", "isBot": true, "highlightedText": "", "score": "95.70%"}, {"id": 76, "text": "Question: Converting from fixed width columns to csv with a score of 95.68%", "isBot": true, "highlightedText": "", "score": "95.68%"}, {"id": 77, "text": "```data.to_csv(\"out_file.csv\", header=[\"column1 title\", \"column2 title\",...])\n```", "isBot": true, "highlightedText": "", "score": "95.68%"}, {"id": 78, "text": "Question: Python how can i sort a csv file by the column id with a score of 95.67%", "isBot": true, "highlightedText": "", "score": "95.67%"}, {"id": 79, "text": "```import csv\narray = csv.reader(open('1.csv','r'))\na = list(array)[:] # for a[0] - save first line\ns_array = [a[0]] + sorted(a[1:], key=lambda x: x[-1])\ncsv.writer(open('2.csv', 'wb'), dialect='excel').writerows(s_array)\n```", "isBot": true, "highlightedText": "", "score": "95.67%"}, {"id": 80, "text": "Question: Writing multi-dimensional list value to a file in Python with a score of 95.65%", "isBot": true, "highlightedText": "", "score": "95.65%"}, {"id": 81, "text": "```import csv\nwith open(filename, 'w') as f:\n   writer = csv.writer(f, delimiter=',')\n   writer.writerows(my_list)  #considering my_list is a list of lists.\n```", "isBot": true, "highlightedText": "", "score": "95.65%"}, {"id": 82, "text": "Question: write list of tuples of lists to text file with a score of 95.56%", "isBot": true, "highlightedText": "", "score": "95.56%"}, {"id": 83, "text": "```import csv, itertools\nwith open('file.csv', 'wb') as f:\n    writer = csv.writer(f, delimiter=\"\\t\")\n    writer.writerows(list(itertools.chain(*t)) for t in results)\n```", "isBot": true, "highlightedText": "", "score": "95.56%"}, {"id": 84, "text": "Question: Add data to rows in csv file python with a score of 95.52%", "isBot": true, "highlightedText": "", "score": "95.52%"}, {"id": 85, "text": "```import csv\n\nlstName = ['a', 'b', 'c', 'd', 'e', 'etc']\n\nwith open('file.csv', 'r+') as f:\n    reader = csv.reader(f, delimiter='\\t')\n    out_lines = [row + [lstName[i]] for i, row in enumerate(reader)]\n    f.seek(0)    # set file position to the beginning of the file\n    csv.writer(f, delimiter='\\t').writerows(out_lines)\n```", "isBot": true, "highlightedText": "", "score": "95.52%"}, {"id": 86, "text": "Question: How to write List of lists in csv file in python with a score of 95.49%", "isBot": true, "highlightedText": "", "score": "95.49%"}, {"id": 87, "text": "```with open('output.csv', 'w', newline='') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(data)\n```", "isBot": true, "highlightedText": "", "score": "95.49%"}, {"id": 88, "text": "I classified your question with the following intent: code_concept And found these entities: last: operation, csv-file: data_structure, save: operation", "isBot": true}], "2023-05-03T22:11:48.180248": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "How can I create a program which ranks random data into a organised table and plot the data into a graph..", "isBot": false, "highlightedText": "How can I create a <span class=\"entity-query\">program<span class=\"label\">[query]</span></span> which ranks <span class=\"entity-query\">random data<span class=\"label\">[query]</span></span> into a organised table and plot the data into a graph..", "intent": "code_search"}, {"id": 1, "text": "Question: How can I sort a boxplot in pandas by the median values? with a score of 94.89%", "isBot": true, "highlightedText": "", "score": "94.89%", "isRemoved": true}, {"id": 2, "text": "```import pandas as pd\nimport random\nimport matplotlib.pyplot as plt\n\nn = 100\n# this is probably a strange way to generate random data; please feel free to correct it\ndf = pd.DataFrame({\"X\": [random.choice([\"A\",\"B\",\"C\"]) for i in range(n)], \n                   \"Y\": [random.choice([\"a\",\"b\",\"c\"]) for i in range(n)],\n                   \"Z\": [random.gauss(0,1) for i in range(n)]})\ngrouped = df.groupby([\"X\", \"Y\"])\n\ndf2 = pd.DataFrame({col:vals['Z'] for col,vals in grouped})\n\nmeds = df2.median()\nmeds.sort(ascending=False)\ndf2 = df2[meds.index]\ndf2.boxplot()\n\nplt.show()\n```", "isBot": true, "highlightedText": "", "score": "94.89%", "liked": false, "disliked": true, "feedback": "", "isRemoved": true}, {"id": 3, "text": "Question: Finding the maximum entry based on another column in a data frame with a score of 94.89%", "isBot": true, "highlightedText": "", "score": "94.89%", "isRemoved": true}, {"id": 4, "text": "```# generate sample data\nimport pandas as pd\ndf = pd.DataFrame(np.random.randint(0,10,(10,3)))\ndf.columns = ['A','B','C']\n\n# sort by C, group by A, take last row of each group\ndf.sort('C').groupby('A').nth(-1)\n```", "isBot": true, "highlightedText": "", "score": "94.89%", "liked": false, "disliked": true, "feedback": "doesn't plot\n", "isRemoved": true}, {"id": 5, "text": "Question: Improving simple bar chart using matplotlib with a score of 94.87%", "isBot": true, "highlightedText": "", "score": "94.87%"}, {"id": 6, "text": "```import numpy as np\nimport pandas\nimport matplotlib.pyplot as plt\n\ndatamap = {\n    1: 'real bad',\n    2: 'bad',\n    3: 'meh',\n    4: 'good',\n    5: 'way good'\n}\n\n\ndf = pandas.DataFrame(data=np.random.choice(range(1,6), size=37), columns=['score'])\ndf['rating'] = df.score.map(datamap.get)\n\nfig, ax = plt.subplots()\ndf.rating.value_counts().plot(kind='bar', ax=ax)\n## alternatively:\n# df.groupby(by='rating').count().plot(kind='bar', ax=ax)\nfig.tight_layout()\n```", "isBot": true, "highlightedText": "", "score": "94.87%"}, {"id": 7, "text": "Question: Efficiently plotting multiple columns in pandas with a score of 94.83%", "isBot": true, "highlightedText": "", "score": "94.83%"}, {"id": 8, "text": "```# Transverse\ndata = pd.read_csv(\"data.txt\").T\n\n# Insert your code to remove irrelevant rows, like a, b, c in your example\n#\n\n# Group by the trial number (the first six characters) and plot\ndata.groupby(lambda x: x[:6], axis=0).plot()\n```", "isBot": true, "highlightedText": "", "score": "94.83%"}, {"id": 9, "text": "Question: Basic Matplotlib Scatter Plot From Pandas DataFrame with a score of 94.82%", "isBot": true, "highlightedText": "", "score": "94.82%"}, {"id": 10, "text": "```import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndataframe = pd.DataFrame({'Col': np.random.uniform(size=1000)})\nplt.scatter(dataframe.index, dataframe['Col'])\n```", "isBot": true, "highlightedText": "", "score": "94.82%", "liked": false, "disliked": true}, {"id": 11, "text": "Question: How to plot two columns in a dataframe and add legends? with a score of 94.71%", "isBot": true, "highlightedText": "", "score": "94.71%", "isRemoved": true}, {"id": 12, "text": "```import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame(np.random.random((4,3)), columns=list('ABC'))\nfor col in ('A', 'B'):\n    df[col].plot(legend=True)\nplt.show()\n```", "isBot": true, "highlightedText": "", "score": "94.71%", "liked": false, "disliked": true, "feedback": "\n", "isRemoved": true}, {"id": 13, "text": "Question: How to add black lines to stacked pandas area plot? with a score of 94.63%", "isBot": true, "highlightedText": "", "score": "94.63%"}, {"id": 14, "text": "```import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.random.randn(10,3)\ndf = pd.DataFrame(abs(data))\nplt.stackplot(np.arange(10),[df[0],df[1],df[2]])\nplt.show()\n```", "isBot": true, "highlightedText": "", "score": "94.63%"}, {"id": 15, "text": "Question: Too many columns for one figure using matplotlib with a score of 94.62%", "isBot": true, "highlightedText": "", "score": "94.62%", "isRemoved": true}, {"id": 16, "text": "```import numpy as np\nimport pandas as pd\nimport pylab as pl\n\ndata = np.random.random((60,1))\ndf1  = pd.DataFrame(data)\n\npl.figure()\npl.subplot(211)\ndf1.iloc[:30][0].plot(kind='bar')\npl.subplot(212)\ndf1.iloc[30:][0].plot(kind='bar')\n```", "isBot": true, "highlightedText": "", "score": "94.62%", "liked": false, "disliked": true, "feedback": "\n", "isRemoved": true}, {"id": 17, "text": "Question: inner product of a matrix with a score of 94.58%", "isBot": true, "highlightedText": "", "score": "94.58%"}, {"id": 18, "text": "```import pandas as pd\nimport numpy as np\n\nnp.random.seed([3, 1415])\ndf = pd.DataFrame(np.random.rand(10, 3).round(2), columns=['one', 'two', 'three'])\n\n# pandas approach\nprint df.mul(df).sum().sum()\n\n# numpy approach\nprint np.square(df.values).sum()\n\n10.9148\n10.9148\n```", "isBot": true, "highlightedText": "", "score": "94.58%"}, {"id": 19, "text": "Question: How to update dataframe value with a score of 94.56%", "isBot": true, "highlightedText": "", "score": "94.56%"}, {"id": 20, "text": "```import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n\nfor row in df.itertuples():\n    df.set_value(row.Index,'test',row.D)\n\nprint df.head()\n\n\nprint df.head()\n```", "isBot": true, "highlightedText": "", "score": "94.56%"}, {"id": 21, "text": "I classified your question with the following intent: code_search And found these entities: program: query, random data: query", "isBot": true}, {"id": 22, "text": "Create a trendline which represents the everage data entries in the graph. Approximate the created trendline into an equation.", "isBot": false, "highlightedText": "Create a <span class=\"entity-query\">trendline<span class=\"label\">[query]</span></span> which <span class=\"entity-query\">represents<span class=\"label\">[query]</span></span> the <span class=\"entity-query\">everage data entries<span class=\"label\">[query]</span></span> in the graph. Approximate the created <span class=\"entity-query\">trendline<span class=\"label\">[query]</span></span> into an equation.", "intent": "code_concept"}, {"id": 23, "text": "Question: Trendline in Plotly Python with a score of 93.18%", "isBot": true, "highlightedText": "", "score": "93.18%"}, {"id": 24, "text": "```import plotly.plotly as py\nimport plotly.tools as tls\nfrom plotly.graph_objs import *\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as dates\n\ndef line(x, a, b):\n    return a * x + b\n\npopt, pcov = curve_fit(line, trend_dates.ravel(), trend_lines.ravel())\n\nfig1 = plt.figure(figsize=(8,6))\nplt.plot_date(new_x, trend_lines, 'o', label='Lines')\nz = np.polyfit(new_x, trend_lines, 1)\np = np.poly1d(z)\nplt.plot(new_x, p(new_x), '-', label='Fit')\nplt.title('Lines per day')\nfig = tls.mpl_to_plotly(fig1)\nfig['layout'].update(showlegend=True)\nfig.strip_style()\npy.iplot(fig)\n```", "isBot": true, "highlightedText": "", "score": "93.18%", "liked": true, "disliked": false}, {"id": 25, "text": "Question: How to add trendline in python matplotlib dot (scatter) graphs? with a score of 92.99%", "isBot": true, "highlightedText": "", "score": "92.99%"}, {"id": 26, "text": "```# plot the data itself\npylab.plot(x,y,'o')\n\n# calc the trendline\nz = numpy.polyfit(x, y, 1)\np = numpy.poly1d(z)\npylab.plot(x,p(x),\"r--\")\n# the line equation:\nprint \"y=%.6fx+(%.6f)\"%(z[0],z[1])\n```", "isBot": true, "highlightedText": "", "score": "92.99%", "liked": true, "disliked": false}, {"id": 27, "text": "Question: Choropleth map from Geopandas GeoDataFame with a score of 92.80%", "isBot": true, "highlightedText": "", "score": "92.80%"}, {"id": 28, "text": "```ax = plot_dataframe(tracts, column='CRIME', scheme='QUANTILES', k=3, colormap='OrRd', legend=True)\n```", "isBot": true, "highlightedText": "", "score": "92.80%"}, {"id": 29, "text": "Question: define an integration function in python with a score of 92.78%", "isBot": true, "highlightedText": "", "score": "92.78%"}, {"id": 30, "text": "```X = [0.1*i for i in xrange(40)]\nY = [TotalEnergy_GW_onelevel(x) for x in X]\nplot(X,Y)\n```", "isBot": true, "highlightedText": "", "score": "92.78%"}, {"id": 31, "text": "Question: Seaborn jointplot joint density level / color scale adjustment with a score of 92.78%", "isBot": true, "highlightedText": "", "score": "92.78%"}, {"id": 32, "text": "```g = sns.jointplot(x1, x2, kind=\"kde\", ratio=5, size=7, space=0, n_levels=100)\n```", "isBot": true, "highlightedText": "", "score": "92.78%"}, {"id": 33, "text": "Question: Having two kinds of graphics in same ggplot with a score of 92.77%", "isBot": true, "highlightedText": "", "score": "92.77%"}, {"id": 34, "text": "```ggplot(aes(x=x), data=df_lng) + geom_line(aes(y=value, colour=variable), size=1.3) +\n  geom_rect(aes(fill=factor(Back), xmin=x, xmax=x+1, ymin=0, ymax=max(value)*1.07), alpha=.1) + \n  scale_fill_discrete(guide=\"none\")\n```", "isBot": true, "highlightedText": "", "score": "92.77%"}, {"id": 35, "text": "Question: how to scale the histogram plot via matplotlib with a score of 92.72%", "isBot": true, "highlightedText": "", "score": "92.72%"}, {"id": 36, "text": "```# Generate some data\ndata = np.random.normal(size=1000)\n\n# Generate the histogram data directly\nhist, bin_edges = np.histogram(data, bins=10)\n\n# Get the reversed cumulative sum\nhist_neg_cumulative = [np.sum(hist[i:]) for i in range(len(hist))]\n\n# Get the cin centres rather than the edges\nbin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2.\n\n# Plot\nplt.step(bin_centers, hist_neg_cumulative)\n\nplt.show()\n```", "isBot": true, "highlightedText": "", "score": "92.72%"}, {"id": 37, "text": "Question: Time filtering in django model with a score of 92.69%", "isBot": true, "highlightedText": "", "score": "92.69%"}, {"id": 38, "text": "```def trend(self):\n    range_start = self.time_measured.minute - timedelta(minute=10)\n    data = Data.objects.filter(time_measured__minute__gt=range_start)\nreturn float(data_operation(data))\n```", "isBot": true, "highlightedText": "", "score": "92.69%"}, {"id": 39, "text": "Question: igraph python remove border with a score of 92.62%", "isBot": true, "highlightedText": "", "score": "92.62%"}, {"id": 40, "text": "```import igraph\ng = igraph.Graph([(0,1), (0,2), (2,1)])\nigraph.plot(g, vertex_frame_color='red')\n```", "isBot": true, "highlightedText": "", "score": "92.62%"}, {"id": 41, "text": "Question: How to limit the width/height of svg in pygal with a score of 92.60%", "isBot": true, "highlightedText": "", "score": "92.60%"}, {"id": 42, "text": "```chart = pygal.StackedLine(width=1000, height=800)\n```", "isBot": true, "highlightedText": "", "score": "92.60%"}, {"id": 43, "text": "I classified your question with the following intent: code_concept And found these entities: trendline: query, represents: query, everage data entries: query", "isBot": true}, {"id": 44, "text": "Move the found data between different dataframes.", "isBot": false, "highlightedText": "Move the found <span class=\"entity-operation\">data<span class=\"label\">[operation]</span></span> between different <span class=\"entity-operation\">data<span class=\"label\">[operation]</span></span>frames.", "intent": "code_search"}, {"id": 45, "text": "Question: Merge/Concat Issue with a score of 93.69%", "isBot": true, "highlightedText": "", "score": "93.69%"}, {"id": 46, "text": "```df3 = dataframe1.merge(dataframe2, on='ID', how='left)\n```", "isBot": true, "highlightedText": "", "score": "93.69%"}, {"id": 47, "text": "Question: How to get first column of an array with a score of 93.63%", "isBot": true, "highlightedText": "", "score": "93.63%"}, {"id": 48, "text": "```dataframe = pd.read_csv('data.csv')\n\nX = dataframe.iloc[:,(0,1)]\ny = dataframe.iloc[:,(2)]:\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\nX_test.ix[:,0]\n```", "isBot": true, "highlightedText": "", "score": "93.63%"}, {"id": 49, "text": "Question: Creating pandas dataframe from list of dictionaries containing lists of data with a score of 93.43%", "isBot": true, "highlightedText": "", "score": "93.43%"}, {"id": 50, "text": "```df = pd.DataFrame(data)\nfix = df.groupby(level=0)['data'].apply(lambda x:pd.DataFrame(x.iloc[0],columns = ['Year','Value']))\nfix = fix.reset_index(level=1,drop=True)\ndf = pd.merge(fix,df.drop(['data'],1),how='inner',left_index=True,right_index=True)\n```", "isBot": true, "highlightedText": "", "score": "93.43%", "liked": true, "disliked": false}, {"id": 51, "text": "Question: how to combine two data frames in python pandas with a score of 93.41%", "isBot": true, "highlightedText": "", "score": "93.41%"}, {"id": 52, "text": "```bigdata=data1.append(data2,ignore_index = True)\n```", "isBot": true, "highlightedText": "", "score": "93.41%"}, {"id": 53, "text": "Question: Using numpy load only lines fitting certain criteria with a score of 93.23%", "isBot": true, "highlightedText": "", "score": "93.23%"}, {"id": 54, "text": "```data = pandas.read_csv('file.csv')\n# keep only rows with x equals to 2\ndata = data[data['x'] == 2]\n# convert to numpy array \narr = numpy.asarray(data)\n```", "isBot": true, "highlightedText": "", "score": "93.23%"}, {"id": 55, "text": "Question: Creating a zero-filled pandas data frame with a score of 93.23%", "isBot": true, "highlightedText": "", "score": "93.23%"}, {"id": 56, "text": "```d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)\n```", "isBot": true, "highlightedText": "", "score": "93.23%"}, {"id": 57, "text": "Question: remove keys from pandas.dataframe with a score of 93.21%", "isBot": true, "highlightedText": "", "score": "93.21%"}, {"id": 58, "text": "```import pandas as pd\nimport numpy as np\n\nkeys1 = [1,2,3,4]\nkeys2 = [3,4,5,6]\ndata1 = np.reshape(range(20),[4,5])\ndata2 = np.reshape(range(20,40),[4,5])\n\ndf1 = pd.DataFrame(data1,index=keys1)\ndf2 = pd.DataFrame(data2,index=keys2)\n\ndf1[-(df1.index.isin(df2.index))]\n```", "isBot": true, "highlightedText": "", "score": "93.21%"}, {"id": 59, "text": "Question: How can I plot online data coming from two different sources in python? with a score of 93.21%", "isBot": true, "highlightedText": "", "score": "93.21%"}, {"id": 60, "text": "```def add_data (new_data, old_data, n): # keep n points\n    return (old_data + new_data)[-n:]\n```", "isBot": true, "highlightedText": "", "score": "93.21%"}, {"id": 61, "text": "Question: How to select row and column from dataframe using pandas with a score of 93.09%", "isBot": true, "highlightedText": "", "score": "93.09%"}, {"id": 62, "text": "```# create new dataframe for selected data\nnew_df = pd.DataFrame()\n\n# placeholder for six selections (i = 1...6)\nfor i, df in enumerate(dataframes):\n    colname = 'Run {}'.format(i+1)\n    selected_data = i['Unnamed: 3'].ix[12:16]  \n    new_df[colname] = selected_data\n    print new_df  \n```", "isBot": true, "highlightedText": "", "score": "93.09%"}, {"id": 63, "text": "Question: Visualization of 3D-numpy-array frame by frame with a score of 93.08%", "isBot": true, "highlightedText": "", "score": "93.08%"}, {"id": 64, "text": "```def update(val):\n    frame = numpy.around(sframe.val)\n    l.set_data(data[frame,:,:])\n```", "isBot": true, "highlightedText": "", "score": "93.08%"}, {"id": 65, "text": "I classified your question with the following intent: code_search And found these entities: data: operation, dataframes: data_structure", "isBot": true}], "2023-05-04T08:33:05.275204": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "can you filter all numbers by date received?", "isBot": false, "highlightedText": ""}, {"id": 1, "text": "can you filter all numbers by date received?", "isBot": false, "highlightedText": "can you <span class=\"entity-query\">filter all numbers<span class=\"label\">[query]</span></span> <span class=\"entity-query\">by<span class=\"label\">[query]</span></span> <span class=\"entity-data_structure\">date<span class=\"label\">[data_structure]</span></span> received?", "intent": "code_example"}, {"id": 2, "text": "Question: I am trying to combine two lists of the same object, sorting with different fields but same type of data in python with a score of 95.00%", "isBot": true, "highlightedText": "", "score": "95.00%"}, {"id": 3, "text": "```Notifications.objects.filter(**some_filter_args)\n  .extra(select={\"sortdate\" : 'COALESCE(\"due_date\", \"date\")'})\n  .order_by(\"-sortdate\") \n```", "isBot": true, "highlightedText": "", "score": "95.00%"}, {"id": 4, "text": "Question: django query question with a score of 94.79%", "isBot": true, "highlightedText": "", "score": "94.79%"}, {"id": 5, "text": "```Foo.objects.order_by('b_date').values_list('b_date', flat=True)\n```", "isBot": true, "highlightedText": "", "score": "94.79%"}, {"id": 6, "text": "Question: In python, sorting on date field, field may sometimes be null with a score of 94.73%", "isBot": true, "highlightedText": "", "score": "94.73%"}, {"id": 7, "text": "```import datetime\nmindate = datetime.date(datetime.MINYEAR, 1, 1)\n\ndef getaccountingdate(x):\n  return x['accountingdate'] or mindate\n\nresults = sorted(results, key=getaccountingdate, reverse=True)\n```", "isBot": true, "highlightedText": "", "score": "94.73%"}, {"id": 8, "text": "Question: sqlalchemy conditional multiple filters on dynamic lazy relationship with a score of 94.48%", "isBot": true, "highlightedText": "", "score": "94.48%"}, {"id": 9, "text": "```if start_date:\n   p = p.filter(Post.date >= start_date)\n\nif end_date:\n   p = p.filter(Post.date <= end_date)\n\nreturn p\n```", "isBot": true, "highlightedText": "", "score": "94.48%"}, {"id": 10, "text": "Question: How to convert Mysql query for date range into Django query with a score of 94.44%", "isBot": true, "highlightedText": "", "score": "94.44%"}, {"id": 11, "text": "```from django.db.models import Q\n\ndate_filter = Q(start_date__range = [str(daterangestart), str(datereangeend)] )\ndate_filter |= Q(end_date__range = [str(daterangestart), str(datereangeend)] )\nreportDetails = productreport.objects.filter(date_filter)\n```", "isBot": true, "highlightedText": "", "score": "94.44%"}, {"id": 12, "text": "Question: SQL-like MAX and GROUP BY over a list of dicts with a score of 94.43%", "isBot": true, "highlightedText": "", "score": "94.43%"}, {"id": 13, "text": "```#group by date\nunique_dates={v['date'] for v in data}\n\n#calculate the aggregation function for each group\ndate_maxapples={d,max(v['apples'] for v in data if v['date']==d) for d in unique_dates}\n```", "isBot": true, "highlightedText": "", "score": "94.43%"}, {"id": 14, "text": "Question: Django - get distinct dates from timestamp with a score of 94.42%", "isBot": true, "highlightedText": "", "score": "94.42%"}, {"id": 15, "text": "```truncate_date = connection.ops.date_trunc_sql('day','timestamp')\nqs = qs.extra({'date':truncate_date})\nreturn qs.values('date').annotate(Sum('amount')).order_by('date')\n```", "isBot": true, "highlightedText": "", "score": "94.42%"}, {"id": 16, "text": "Question: Custom SimpleListFilter Subclass for DjangoAdmin with a score of 94.38%", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 17, "text": "```class MaxDateListFilter(SimpleListFilter):\n    title = _('maximum date')\n    parameter_name = 'max_date'\n\n    def lookups(self, request, model_admin):\n        return [(str(year.year), year.year) \\\n                 for year in Entry.objects.dates('pub_date', 'year')]\n\n    def queryset(self, request, queryset):\n        return queryset.filter(pub_date__year__lte=self.value())\n```", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 18, "text": "Question: Localized date strftime in Django view with a score of 94.34%", "isBot": true, "highlightedText": "", "score": "94.34%"}, {"id": 19, "text": "```from django.template.defaultfilters import date as _date\nfrom datetime import datetime\n\n_date(datetime.now(), \"d b, D\")\n```", "isBot": true, "highlightedText": "", "score": "94.34%"}, {"id": 20, "text": "Question: Convert LINQ to List<T> to Python 2.7 with a score of 94.21%", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 21, "text": "```data = [d.Id for d in MyDate().query.all()]\n```", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 22, "text": "I classified your question with the following intent: code_example And found these entities: filter all numbers: query, by: query, date: data_structure", "isBot": true}, {"id": 23, "text": "Can you save my_animal list to a .csv file?", "isBot": false, "highlightedText": "Can you <span class=\"entity-operation\">save my_animal<span class=\"label\">[operation]</span></span> <span class=\"entity-data_structure\">list to a<span class=\"label\">[data_structure]</span></span> .<span class=\"entity-query\">csv<span class=\"label\">[query]</span></span> <span class=\"entity-data_structure\">file<span class=\"label\">[data_structure]</span></span>?", "intent": "code_concept"}, {"id": 24, "text": "Question: How do I create an empty csv file on a specific folder? with a score of 94.71%", "isBot": true, "highlightedText": "", "score": "94.71%"}, {"id": 25, "text": "```with open(\"foo.csv\", \"w\") as my_empty_csv:\n  # now you have an empty file already\n  pass  # or write something to it already\n```", "isBot": true, "highlightedText": "", "score": "94.71%", "liked": false, "disliked": true}, {"id": 26, "text": "Question: Append new data to a .csv? with a score of 94.22%", "isBot": true, "highlightedText": "", "score": "94.22%"}, {"id": 27, "text": "```import csv\n\nf = file(\"file.csv\", 'a')\ncsv_writer = csv.writer(f)\n\nmy_record = [\"This\", \"is\", \"a\", \"row\", \"of\", \"data\"]\n\ncsv_writer.writerow(my_record)\n```", "isBot": true, "highlightedText": "", "score": "94.22%", "liked": true, "disliked": false}, {"id": 28, "text": "Question: Setting the save file directory and arrays with a score of 94.15%", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 29, "text": "```ASXCodes = ('CSL', 'XXX', 'YYY')\nfor ASXCode in ASXCodes:\n    local_filename = \"c:\\\\myfiles\\\\foobar\\\\\" + ASXCode + \".csv\"\n    print(\"Saving to {}\".format(local_filename))\n    with open(local_filename, 'w', newline='') as outf:\n        ...\nprint(\"done\")\n```", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 30, "text": "Question: How to I generate a CSV file from a python list with each list item in a seperate row with a score of 94.13%", "isBot": true, "highlightedText": "", "score": "94.13%"}, {"id": 31, "text": "```myfile = open('/home/graham/Desktop/Experiment/listcsv.csv', 'wb')\nwr = csv.writer(myfile, quoting=csv.QUOTE_ALL)\nwr.writerows([path] for path in list_of_paths)\n```", "isBot": true, "highlightedText": "", "score": "94.13%", "liked": true, "disliked": false}, {"id": 32, "text": "Question: python numpy.savetxt header has extra character # with a score of 94.09%", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 33, "text": "```np.savetxt(\"foo.csv\", x, delimiter=\",\", header=\"ID,AMOUNT\", \n           fmt=\"%i\", comments='')\n```", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 34, "text": "Question: Split CSV file into multiple files by column-data with a score of 93.97%", "isBot": true, "highlightedText": "", "score": "93.97%"}, {"id": 35, "text": "```import pandas\n\ncsv = pandas.read_csv('test.csv', sep=',', header=3, skipinitialspace=True)\n# header=3 because your header is on the third line\n# skipinitialspace is set to True because your example data has spaces after commas\ncsv_apples = csv[csv['Fruit'] == 'Apple']\ncsv_bananas = csv[csv['Fruit'] == 'Banana']\n\ncsv_apples.to_csv('apples.csv', index=False, sep=',')\ncsv_bananas.to_csv('bananas.csv', index=False, sep=',')\n```", "isBot": true, "highlightedText": "", "score": "93.97%"}, {"id": 36, "text": "Question: Panda's Write CSV - Append vs. Write with a score of 93.94%", "isBot": true, "highlightedText": "", "score": "93.94%"}, {"id": 37, "text": "```import os\n# if file does not exist write header \nif not os.path.isfile('filename.csv'):\n   df.to_csv('filename.csv',header ='column_names')\nelse: # else it exists so append without writing the header\n    df.to_csv('filename.csv',mode = 'a',header=False)\n```", "isBot": true, "highlightedText": "", "score": "93.94%"}, {"id": 38, "text": "Question: Writing a set plus a formatted string to a CSV? with a score of 93.91%", "isBot": true, "highlightedText": "", "score": "93.91%"}, {"id": 39, "text": "```import csv\ntestSet = set(['thissucks.in', 'whateverlife.in', 'crapface.in', 'lasttry.in'])\nwith open('mag.csv', 'ab+') as f:\n    writer = csv.writer(f ,dialect= 'excel', delimiter= ',')\n    for domain in testSet:\n        writer.writerow([domain, '', 'Related'] )\n```", "isBot": true, "highlightedText": "", "score": "93.91%"}, {"id": 40, "text": "Question: Writing multi-dimensional list value to a file in Python with a score of 93.86%", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 41, "text": "```import csv\nwith open(filename, 'w') as f:\n   writer = csv.writer(f, delimiter=',')\n   writer.writerows(my_list)  #considering my_list is a list of lists.\n```", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 42, "text": "Question: Python output to CSV with a score of 93.85%", "isBot": true, "highlightedText": "", "score": "93.85%"}, {"id": 43, "text": "```with open('/home/kwal0203/Desktop/eggs.csv', 'a') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerow([\"Hello my friend\"])\n```", "isBot": true, "highlightedText": "", "score": "93.85%", "liked": true, "disliked": false}, {"id": 44, "text": "I classified your question with the following intent: code_concept And found these entities: save my_animal: operation, list to a: data_structure, csv: query, file: data_structure", "isBot": true}, {"id": 45, "text": "Get my current IP address and convert it into a date string", "isBot": false, "highlightedText": "Get my current IP <span class=\"entity-operation\">address<span class=\"label\">[operation]</span></span> <span class=\"entity-query\">a<span class=\"label\">[query]</span></span>nd <span class=\"entity-query\">convert<span class=\"label\">[query]</span></span> it into <span class=\"entity-query\">a<span class=\"label\">[query]</span></span> <span class=\"entity-data_structure\">date<span class=\"label\">[data_structure]</span></span> <span class=\"entity-data_structure\">string<span class=\"label\">[data_structure]</span></span>", "intent": "code_concept"}, {"id": 46, "text": "Question: Django Applying a date formatting in a model with a score of 95.23%", "isBot": true, "highlightedText": "", "score": "95.23%"}, {"id": 47, "text": "```@property\ndef my_date_formatted(self):\n    return self.my_date.strftime('%B %Y')\n```", "isBot": true, "highlightedText": "", "score": "95.23%"}, {"id": 48, "text": "Question: Insert a tzinfo into datetime with a score of 94.81%", "isBot": true, "highlightedText": "", "score": "94.81%"}, {"id": 49, "text": "```def transform_date(date_string, tzinfo):\n    fmt = '%Y-%m-%d'\n    date = datetime.strptime(date_string, fmt).replace(tzinfo=tzinfo)\n    return date\n```", "isBot": true, "highlightedText": "", "score": "94.81%"}, {"id": 50, "text": "Question: Add current day to a specified hour and minute in Python with a score of 94.78%", "isBot": true, "highlightedText": "", "score": "94.78%"}, {"id": 51, "text": "```import datetime\na = datetime.datetime.strptime(\"8:30pm\", \"%I:%M%p\")\ntoday = datetime.datetime.today()\n\nresult = datetime.datetime.combine(today.date(), a.time())\n\n# result == datetime.datetime(2011, 12, 25, 20, 30)\n```", "isBot": true, "highlightedText": "", "score": "94.78%"}, {"id": 52, "text": "Question: How to change field.date format in OpenERP 7 (Odoo) with a score of 94.71%", "isBot": true, "highlightedText": "", "score": "94.71%"}, {"id": 53, "text": "```from dateutil import parser\n...\nmy_date = parser.parse(my_object.date)\nproper_date_string = my_date.strftime('%d-%m-%Y')\n```", "isBot": true, "highlightedText": "", "score": "94.71%"}, {"id": 54, "text": "Question: Default \"future\" year when effecting date conversion with dateutil with a score of 94.62%", "isBot": true, "highlightedText": "", "score": "94.62%"}, {"id": 55, "text": "```import datetime\nimport dateutil\n\ndef parse(date_string):\n    result = dateutil.parser.parse(date_string, default=datetime.datetime(1581, 1, 1))\n    if result.year == 1581:\n        now = datetime.datetime.now()\n        result = result.replace(year=now.year)\n        if result < now:\n            result = result.replace(year=now.year + 1)\n    return result\n\nparse('8th April')\n```", "isBot": true, "highlightedText": "", "score": "94.62%"}, {"id": 56, "text": "Question: Python convert integer to date with a score of 94.58%", "isBot": true, "highlightedText": "", "score": "94.58%"}, {"id": 57, "text": "```def xldate_to_datetime(xldate):\n   tempDate = datetime.datetime(1900, 1, 1)\n   deltaDays = datetime.timedelta(days=int(xldate)-2)\n   TheTime = (tempDate + deltaDays )\n   return TheTime.strftime(\"%m/%d/%Y\")\n\n>>> xldate_to_datetime(42290)\n'10/13/2015'\n```", "isBot": true, "highlightedText": "", "score": "94.58%"}, {"id": 58, "text": "Question: age calculator in python from date (mm/dd/yyyy) and print age in years only with a score of 94.55%", "isBot": true, "highlightedText": "", "score": "94.55%"}, {"id": 59, "text": "```from datetime import datetime\n\nmy_date = raw_input(\"Enter B'date in mmi/dd/yyyy format:\")\n\nb_date = datetime.strptime(my_date, '%m/%d/%Y')\n\nprint \"Age : %d\" % ((datetime.today() - b_date).days/365)\n```", "isBot": true, "highlightedText": "", "score": "94.55%"}, {"id": 60, "text": "Question: python, how i do xml = '<start>%??</start>' % datetime.datetime with a score of 94.53%", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 61, "text": "```mydate = datetime.datetime.now()\nmyxmldate = '<start>%s</start>' % mydate.isoformat()\n```", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 62, "text": "Question: pyqt how to get python timestamp from QDateTimeEdit with a score of 94.53%", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 63, "text": "```my_time = my_tedit.dateTime()\nmy_time = my_time.toPyDateTime()\n```", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 64, "text": "Question: I need create a variable that is the GMT offset where it's 7:XX AM right now with a score of 94.49%", "isBot": true, "highlightedText": "", "score": "94.49%"}, {"id": 65, "text": "```def OfsToHour(targetHour = 7):\n    import datetime\n    t = datetime.datetime.utcnow() #or your favored UTC call\n    return (((targetHour - t.hour) + 12) % 24) - 12\n```", "isBot": true, "highlightedText": "", "score": "94.49%"}, {"id": 66, "text": "I classified your question with the following intent: code_concept And found these entities: address: operation, convert: query, a: query, date: data_structure, string: data_structure", "isBot": true}, {"id": 67, "text": "Get my current IP address and send IP address securely over my network", "isBot": false, "highlightedText": ""}, {"id": 68, "text": "I'm sorry I was unable to use intent modelling to classify your question to query the search engine. Could you please rephrase?", "isBot": true}, {"id": 69, "text": "Can you get my IP address and send it securely over a network?", "isBot": false, "highlightedText": "Can you get my IP <span class=\"entity-operation\">address<span class=\"label\">[operation]</span></span> and send it <span class=\"entity-response\">securely<span class=\"label\">[response]</span></span> over a <span class=\"entity-query\">network<span class=\"label\">[query]</span></span>?", "intent": "code_concept"}, {"id": 70, "text": "Question: How to find out if an IP address belong to a network with python2? with a score of 94.32%", "isBot": true, "highlightedText": "", "score": "94.32%"}, {"id": 71, "text": "```import netaddr\n\nip = netaddr.IPAddress('192.168.1.168').value\nnetwork = netaddr.IPNetwork('192.168.1.0/24')\n\nif ip >= network.first and ip <= network.last:\n    print True\nelse:\n    print False\n```", "isBot": true, "highlightedText": "", "score": "94.32%", "liked": true, "disliked": false}, {"id": 72, "text": "Question: Calculate the N IP of a network with a score of 94.18%", "isBot": true, "highlightedText": "", "score": "94.18%"}, {"id": 73, "text": "```>>> import ipaddress\n>>> addr = ipaddress.ip_address('192.168.0.1')\n>>> net = ipaddress.ip_network('192.168.0.0/20')\n>>> net[256]\nIPv4Address('192.168.1.0')\n>>> next(i for i, a in enumerate(net) if a == addr)\n3\n```", "isBot": true, "highlightedText": "", "score": "94.18%"}, {"id": 74, "text": "Question: Python resolve a host name with IPv6 address with a score of 94.11%", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 75, "text": "```socket.getaddrinfo(\"example.com\", None, socket.AF_INET6)\n```", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 76, "text": "Question: Return IPv6 address Python from domain name with a score of 94.11%", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 77, "text": "```socket.getaddrinfo(\"example.com\", None, socket.AF_INET6)\n```", "isBot": true, "highlightedText": "", "score": "94.11%", "liked": true, "disliked": false}, {"id": 78, "text": "Question: What's the best way for a Django app to get the current IP address of eth0 with a score of 94.03%", "isBot": true, "highlightedText": "", "score": "94.03%"}, {"id": 79, "text": "```# Hack to find machine NIC IP\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\"8.8.4.4\", 80))\nMACHINE_IP = s.getsockname()[0]\ns.close()\n```", "isBot": true, "highlightedText": "", "score": "94.03%"}, {"id": 80, "text": "Question: Asking \"are you sure\" then letting user correct not working with a score of 93.99%", "isBot": true, "highlightedText": "", "score": "93.99%", "isRemoved": true}, {"id": 81, "text": "```def askIP():\n    TheIP = raw_input('Okay, what is it? E.X 112.13.141.9: ')\n    if AskYesNo('Are you sure '+TheIP+' is the correct IP? You will not be able to change this later!!') != True:\n        print('Ok, get it right this time!');\n        return askIP()\n    else:\n        return TheIP\n```", "isBot": true, "highlightedText": "", "score": "93.99%", "liked": false, "disliked": true, "feedback": "not an answer to my question", "isRemoved": true}, {"id": 82, "text": "Question: Test if an internet connection is present in python with a score of 93.93%", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 83, "text": "```import socket\nREMOTE_SERVER = \"www.google.com\"\ndef is_connected():\n  try:\n    # see if we can resolve the host name -- tells us if there is\n    # a DNS listening\n    host = socket.gethostbyname(REMOTE_SERVER)\n    # connect to the host -- tells us if the host is actually\n    # reachable\n    s = socket.create_connection((host, 80), 2)\n    return True\n  except:\n     pass\n  return False\nprint is_connected()\n```", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 84, "text": "Question: How to strip last bits from ip address with a score of 93.93%", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 85, "text": "```import ipaddress\n\ndef strip_addr(ip, bits):\n    nwif = ipaddress.ip_interface(u'%s/%s' % (ip, bits))\n    return str(nwif.network.network_address)\n\nassert strip_addr(u'1.2.3.4', 24) == u'1.2.3.0'\nassert strip_addr(u'2001:1234:f678::9', 33) == u'2001:1234:8000::'\n```", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 86, "text": "Question: Use script to send string through socket with a score of 93.90%", "isBot": true, "highlightedText": "", "score": "93.90%"}, {"id": 87, "text": "```import socket\nfrom struct import pack\nhost='ip_to_connect_to'\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((host,port_to_connect_to))\nanswer=s.recv(1024)\nprint answer\npadding=800 * \"A\"\n\ns.send(padding)\n```", "isBot": true, "highlightedText": "", "score": "93.90%", "liked": true, "disliked": false}, {"id": 88, "text": "Question: determine if two IP addresses can communicate with a score of 93.73%", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 89, "text": "```>>> import ipaddress\n>>> ip1 = ipaddress.IPv4Address('192.168.0.1')\n>>> ip2 = ipaddress.IPv4Address('192.168.0.2')\n>>> ip3 = ipaddress.IPv4Address('192.168.1.1')\n>>> net = ipaddress.IPv4Network('192.168.0.0/24')\n>>> ip1 in net\nTrue\n>>> ip2 in net\nTrue\n>>> ip3 in net\nFalse\n>>> \n```", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 90, "text": "I classified your question with the following intent: code_concept And found these entities: address: operation, securely: response, network: query", "isBot": true}], "2023-05-04T08:33:08.659212": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "can you filter all numbers by date received?", "isBot": false, "highlightedText": ""}, {"id": 1, "text": "can you filter all numbers by date received?", "isBot": false, "highlightedText": "can you <span class=\"entity-query\">filter all numbers<span class=\"label\">[query]</span></span> <span class=\"entity-query\">by<span class=\"label\">[query]</span></span> <span class=\"entity-data_structure\">date<span class=\"label\">[data_structure]</span></span> received?", "intent": "code_example"}, {"id": 2, "text": "Question: I am trying to combine two lists of the same object, sorting with different fields but same type of data in python with a score of 95.00%", "isBot": true, "highlightedText": "", "score": "95.00%"}, {"id": 3, "text": "```Notifications.objects.filter(**some_filter_args)\n  .extra(select={\"sortdate\" : 'COALESCE(\"due_date\", \"date\")'})\n  .order_by(\"-sortdate\") \n```", "isBot": true, "highlightedText": "", "score": "95.00%"}, {"id": 4, "text": "Question: django query question with a score of 94.79%", "isBot": true, "highlightedText": "", "score": "94.79%"}, {"id": 5, "text": "```Foo.objects.order_by('b_date').values_list('b_date', flat=True)\n```", "isBot": true, "highlightedText": "", "score": "94.79%"}, {"id": 6, "text": "Question: In python, sorting on date field, field may sometimes be null with a score of 94.73%", "isBot": true, "highlightedText": "", "score": "94.73%"}, {"id": 7, "text": "```import datetime\nmindate = datetime.date(datetime.MINYEAR, 1, 1)\n\ndef getaccountingdate(x):\n  return x['accountingdate'] or mindate\n\nresults = sorted(results, key=getaccountingdate, reverse=True)\n```", "isBot": true, "highlightedText": "", "score": "94.73%"}, {"id": 8, "text": "Question: sqlalchemy conditional multiple filters on dynamic lazy relationship with a score of 94.48%", "isBot": true, "highlightedText": "", "score": "94.48%"}, {"id": 9, "text": "```if start_date:\n   p = p.filter(Post.date >= start_date)\n\nif end_date:\n   p = p.filter(Post.date <= end_date)\n\nreturn p\n```", "isBot": true, "highlightedText": "", "score": "94.48%"}, {"id": 10, "text": "Question: How to convert Mysql query for date range into Django query with a score of 94.44%", "isBot": true, "highlightedText": "", "score": "94.44%"}, {"id": 11, "text": "```from django.db.models import Q\n\ndate_filter = Q(start_date__range = [str(daterangestart), str(datereangeend)] )\ndate_filter |= Q(end_date__range = [str(daterangestart), str(datereangeend)] )\nreportDetails = productreport.objects.filter(date_filter)\n```", "isBot": true, "highlightedText": "", "score": "94.44%"}, {"id": 12, "text": "Question: SQL-like MAX and GROUP BY over a list of dicts with a score of 94.43%", "isBot": true, "highlightedText": "", "score": "94.43%"}, {"id": 13, "text": "```#group by date\nunique_dates={v['date'] for v in data}\n\n#calculate the aggregation function for each group\ndate_maxapples={d,max(v['apples'] for v in data if v['date']==d) for d in unique_dates}\n```", "isBot": true, "highlightedText": "", "score": "94.43%"}, {"id": 14, "text": "Question: Django - get distinct dates from timestamp with a score of 94.42%", "isBot": true, "highlightedText": "", "score": "94.42%"}, {"id": 15, "text": "```truncate_date = connection.ops.date_trunc_sql('day','timestamp')\nqs = qs.extra({'date':truncate_date})\nreturn qs.values('date').annotate(Sum('amount')).order_by('date')\n```", "isBot": true, "highlightedText": "", "score": "94.42%"}, {"id": 16, "text": "Question: Custom SimpleListFilter Subclass for DjangoAdmin with a score of 94.38%", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 17, "text": "```class MaxDateListFilter(SimpleListFilter):\n    title = _('maximum date')\n    parameter_name = 'max_date'\n\n    def lookups(self, request, model_admin):\n        return [(str(year.year), year.year) \\\n                 for year in Entry.objects.dates('pub_date', 'year')]\n\n    def queryset(self, request, queryset):\n        return queryset.filter(pub_date__year__lte=self.value())\n```", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 18, "text": "Question: Localized date strftime in Django view with a score of 94.34%", "isBot": true, "highlightedText": "", "score": "94.34%"}, {"id": 19, "text": "```from django.template.defaultfilters import date as _date\nfrom datetime import datetime\n\n_date(datetime.now(), \"d b, D\")\n```", "isBot": true, "highlightedText": "", "score": "94.34%"}, {"id": 20, "text": "Question: Convert LINQ to List<T> to Python 2.7 with a score of 94.21%", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 21, "text": "```data = [d.Id for d in MyDate().query.all()]\n```", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 22, "text": "I classified your question with the following intent: code_example And found these entities: filter all numbers: query, by: query, date: data_structure", "isBot": true}, {"id": 23, "text": "Can you save my_animal list to a .csv file?", "isBot": false, "highlightedText": "Can you <span class=\"entity-operation\">save my_animal<span class=\"label\">[operation]</span></span> <span class=\"entity-data_structure\">list to a<span class=\"label\">[data_structure]</span></span> .<span class=\"entity-query\">csv<span class=\"label\">[query]</span></span> <span class=\"entity-data_structure\">file<span class=\"label\">[data_structure]</span></span>?", "intent": "code_concept"}, {"id": 24, "text": "Question: How do I create an empty csv file on a specific folder? with a score of 94.71%", "isBot": true, "highlightedText": "", "score": "94.71%"}, {"id": 25, "text": "```with open(\"foo.csv\", \"w\") as my_empty_csv:\n  # now you have an empty file already\n  pass  # or write something to it already\n```", "isBot": true, "highlightedText": "", "score": "94.71%", "liked": false, "disliked": true}, {"id": 26, "text": "Question: Append new data to a .csv? with a score of 94.22%", "isBot": true, "highlightedText": "", "score": "94.22%"}, {"id": 27, "text": "```import csv\n\nf = file(\"file.csv\", 'a')\ncsv_writer = csv.writer(f)\n\nmy_record = [\"This\", \"is\", \"a\", \"row\", \"of\", \"data\"]\n\ncsv_writer.writerow(my_record)\n```", "isBot": true, "highlightedText": "", "score": "94.22%", "liked": true, "disliked": false}, {"id": 28, "text": "Question: Setting the save file directory and arrays with a score of 94.15%", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 29, "text": "```ASXCodes = ('CSL', 'XXX', 'YYY')\nfor ASXCode in ASXCodes:\n    local_filename = \"c:\\\\myfiles\\\\foobar\\\\\" + ASXCode + \".csv\"\n    print(\"Saving to {}\".format(local_filename))\n    with open(local_filename, 'w', newline='') as outf:\n        ...\nprint(\"done\")\n```", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 30, "text": "Question: How to I generate a CSV file from a python list with each list item in a seperate row with a score of 94.13%", "isBot": true, "highlightedText": "", "score": "94.13%"}, {"id": 31, "text": "```myfile = open('/home/graham/Desktop/Experiment/listcsv.csv', 'wb')\nwr = csv.writer(myfile, quoting=csv.QUOTE_ALL)\nwr.writerows([path] for path in list_of_paths)\n```", "isBot": true, "highlightedText": "", "score": "94.13%", "liked": true, "disliked": false}, {"id": 32, "text": "Question: python numpy.savetxt header has extra character # with a score of 94.09%", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 33, "text": "```np.savetxt(\"foo.csv\", x, delimiter=\",\", header=\"ID,AMOUNT\", \n           fmt=\"%i\", comments='')\n```", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 34, "text": "Question: Split CSV file into multiple files by column-data with a score of 93.97%", "isBot": true, "highlightedText": "", "score": "93.97%"}, {"id": 35, "text": "```import pandas\n\ncsv = pandas.read_csv('test.csv', sep=',', header=3, skipinitialspace=True)\n# header=3 because your header is on the third line\n# skipinitialspace is set to True because your example data has spaces after commas\ncsv_apples = csv[csv['Fruit'] == 'Apple']\ncsv_bananas = csv[csv['Fruit'] == 'Banana']\n\ncsv_apples.to_csv('apples.csv', index=False, sep=',')\ncsv_bananas.to_csv('bananas.csv', index=False, sep=',')\n```", "isBot": true, "highlightedText": "", "score": "93.97%"}, {"id": 36, "text": "Question: Panda's Write CSV - Append vs. Write with a score of 93.94%", "isBot": true, "highlightedText": "", "score": "93.94%"}, {"id": 37, "text": "```import os\n# if file does not exist write header \nif not os.path.isfile('filename.csv'):\n   df.to_csv('filename.csv',header ='column_names')\nelse: # else it exists so append without writing the header\n    df.to_csv('filename.csv',mode = 'a',header=False)\n```", "isBot": true, "highlightedText": "", "score": "93.94%"}, {"id": 38, "text": "Question: Writing a set plus a formatted string to a CSV? with a score of 93.91%", "isBot": true, "highlightedText": "", "score": "93.91%"}, {"id": 39, "text": "```import csv\ntestSet = set(['thissucks.in', 'whateverlife.in', 'crapface.in', 'lasttry.in'])\nwith open('mag.csv', 'ab+') as f:\n    writer = csv.writer(f ,dialect= 'excel', delimiter= ',')\n    for domain in testSet:\n        writer.writerow([domain, '', 'Related'] )\n```", "isBot": true, "highlightedText": "", "score": "93.91%"}, {"id": 40, "text": "Question: Writing multi-dimensional list value to a file in Python with a score of 93.86%", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 41, "text": "```import csv\nwith open(filename, 'w') as f:\n   writer = csv.writer(f, delimiter=',')\n   writer.writerows(my_list)  #considering my_list is a list of lists.\n```", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 42, "text": "Question: Python output to CSV with a score of 93.85%", "isBot": true, "highlightedText": "", "score": "93.85%"}, {"id": 43, "text": "```with open('/home/kwal0203/Desktop/eggs.csv', 'a') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerow([\"Hello my friend\"])\n```", "isBot": true, "highlightedText": "", "score": "93.85%", "liked": true, "disliked": false}, {"id": 44, "text": "I classified your question with the following intent: code_concept And found these entities: save my_animal: operation, list to a: data_structure, csv: query, file: data_structure", "isBot": true}, {"id": 45, "text": "Get my current IP address and convert it into a date string", "isBot": false, "highlightedText": "Get my current IP <span class=\"entity-operation\">address<span class=\"label\">[operation]</span></span> <span class=\"entity-query\">a<span class=\"label\">[query]</span></span>nd <span class=\"entity-query\">convert<span class=\"label\">[query]</span></span> it into <span class=\"entity-query\">a<span class=\"label\">[query]</span></span> <span class=\"entity-data_structure\">date<span class=\"label\">[data_structure]</span></span> <span class=\"entity-data_structure\">string<span class=\"label\">[data_structure]</span></span>", "intent": "code_concept"}, {"id": 46, "text": "Question: Django Applying a date formatting in a model with a score of 95.23%", "isBot": true, "highlightedText": "", "score": "95.23%"}, {"id": 47, "text": "```@property\ndef my_date_formatted(self):\n    return self.my_date.strftime('%B %Y')\n```", "isBot": true, "highlightedText": "", "score": "95.23%"}, {"id": 48, "text": "Question: Insert a tzinfo into datetime with a score of 94.81%", "isBot": true, "highlightedText": "", "score": "94.81%"}, {"id": 49, "text": "```def transform_date(date_string, tzinfo):\n    fmt = '%Y-%m-%d'\n    date = datetime.strptime(date_string, fmt).replace(tzinfo=tzinfo)\n    return date\n```", "isBot": true, "highlightedText": "", "score": "94.81%"}, {"id": 50, "text": "Question: Add current day to a specified hour and minute in Python with a score of 94.78%", "isBot": true, "highlightedText": "", "score": "94.78%"}, {"id": 51, "text": "```import datetime\na = datetime.datetime.strptime(\"8:30pm\", \"%I:%M%p\")\ntoday = datetime.datetime.today()\n\nresult = datetime.datetime.combine(today.date(), a.time())\n\n# result == datetime.datetime(2011, 12, 25, 20, 30)\n```", "isBot": true, "highlightedText": "", "score": "94.78%"}, {"id": 52, "text": "Question: How to change field.date format in OpenERP 7 (Odoo) with a score of 94.71%", "isBot": true, "highlightedText": "", "score": "94.71%"}, {"id": 53, "text": "```from dateutil import parser\n...\nmy_date = parser.parse(my_object.date)\nproper_date_string = my_date.strftime('%d-%m-%Y')\n```", "isBot": true, "highlightedText": "", "score": "94.71%"}, {"id": 54, "text": "Question: Default \"future\" year when effecting date conversion with dateutil with a score of 94.62%", "isBot": true, "highlightedText": "", "score": "94.62%"}, {"id": 55, "text": "```import datetime\nimport dateutil\n\ndef parse(date_string):\n    result = dateutil.parser.parse(date_string, default=datetime.datetime(1581, 1, 1))\n    if result.year == 1581:\n        now = datetime.datetime.now()\n        result = result.replace(year=now.year)\n        if result < now:\n            result = result.replace(year=now.year + 1)\n    return result\n\nparse('8th April')\n```", "isBot": true, "highlightedText": "", "score": "94.62%"}, {"id": 56, "text": "Question: Python convert integer to date with a score of 94.58%", "isBot": true, "highlightedText": "", "score": "94.58%"}, {"id": 57, "text": "```def xldate_to_datetime(xldate):\n   tempDate = datetime.datetime(1900, 1, 1)\n   deltaDays = datetime.timedelta(days=int(xldate)-2)\n   TheTime = (tempDate + deltaDays )\n   return TheTime.strftime(\"%m/%d/%Y\")\n\n>>> xldate_to_datetime(42290)\n'10/13/2015'\n```", "isBot": true, "highlightedText": "", "score": "94.58%"}, {"id": 58, "text": "Question: age calculator in python from date (mm/dd/yyyy) and print age in years only with a score of 94.55%", "isBot": true, "highlightedText": "", "score": "94.55%"}, {"id": 59, "text": "```from datetime import datetime\n\nmy_date = raw_input(\"Enter B'date in mmi/dd/yyyy format:\")\n\nb_date = datetime.strptime(my_date, '%m/%d/%Y')\n\nprint \"Age : %d\" % ((datetime.today() - b_date).days/365)\n```", "isBot": true, "highlightedText": "", "score": "94.55%"}, {"id": 60, "text": "Question: python, how i do xml = '<start>%??</start>' % datetime.datetime with a score of 94.53%", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 61, "text": "```mydate = datetime.datetime.now()\nmyxmldate = '<start>%s</start>' % mydate.isoformat()\n```", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 62, "text": "Question: pyqt how to get python timestamp from QDateTimeEdit with a score of 94.53%", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 63, "text": "```my_time = my_tedit.dateTime()\nmy_time = my_time.toPyDateTime()\n```", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 64, "text": "Question: I need create a variable that is the GMT offset where it's 7:XX AM right now with a score of 94.49%", "isBot": true, "highlightedText": "", "score": "94.49%"}, {"id": 65, "text": "```def OfsToHour(targetHour = 7):\n    import datetime\n    t = datetime.datetime.utcnow() #or your favored UTC call\n    return (((targetHour - t.hour) + 12) % 24) - 12\n```", "isBot": true, "highlightedText": "", "score": "94.49%"}, {"id": 66, "text": "I classified your question with the following intent: code_concept And found these entities: address: operation, convert: query, a: query, date: data_structure, string: data_structure", "isBot": true}, {"id": 67, "text": "Get my current IP address and send IP address securely over my network", "isBot": false, "highlightedText": ""}, {"id": 68, "text": "I'm sorry I was unable to use intent modelling to classify your question to query the search engine. Could you please rephrase?", "isBot": true}, {"id": 69, "text": "Can you get my IP address and send it securely over a network?", "isBot": false, "highlightedText": "Can you get my IP <span class=\"entity-operation\">address<span class=\"label\">[operation]</span></span> and send it <span class=\"entity-response\">securely<span class=\"label\">[response]</span></span> over a <span class=\"entity-query\">network<span class=\"label\">[query]</span></span>?", "intent": "code_concept"}, {"id": 70, "text": "Question: How to find out if an IP address belong to a network with python2? with a score of 94.32%", "isBot": true, "highlightedText": "", "score": "94.32%"}, {"id": 71, "text": "```import netaddr\n\nip = netaddr.IPAddress('192.168.1.168').value\nnetwork = netaddr.IPNetwork('192.168.1.0/24')\n\nif ip >= network.first and ip <= network.last:\n    print True\nelse:\n    print False\n```", "isBot": true, "highlightedText": "", "score": "94.32%", "liked": true, "disliked": false}, {"id": 72, "text": "Question: Calculate the N IP of a network with a score of 94.18%", "isBot": true, "highlightedText": "", "score": "94.18%"}, {"id": 73, "text": "```>>> import ipaddress\n>>> addr = ipaddress.ip_address('192.168.0.1')\n>>> net = ipaddress.ip_network('192.168.0.0/20')\n>>> net[256]\nIPv4Address('192.168.1.0')\n>>> next(i for i, a in enumerate(net) if a == addr)\n3\n```", "isBot": true, "highlightedText": "", "score": "94.18%"}, {"id": 74, "text": "Question: Python resolve a host name with IPv6 address with a score of 94.11%", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 75, "text": "```socket.getaddrinfo(\"example.com\", None, socket.AF_INET6)\n```", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 76, "text": "Question: Return IPv6 address Python from domain name with a score of 94.11%", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 77, "text": "```socket.getaddrinfo(\"example.com\", None, socket.AF_INET6)\n```", "isBot": true, "highlightedText": "", "score": "94.11%", "liked": true, "disliked": false}, {"id": 78, "text": "Question: What's the best way for a Django app to get the current IP address of eth0 with a score of 94.03%", "isBot": true, "highlightedText": "", "score": "94.03%"}, {"id": 79, "text": "```# Hack to find machine NIC IP\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\"8.8.4.4\", 80))\nMACHINE_IP = s.getsockname()[0]\ns.close()\n```", "isBot": true, "highlightedText": "", "score": "94.03%"}, {"id": 80, "text": "Question: Asking \"are you sure\" then letting user correct not working with a score of 93.99%", "isBot": true, "highlightedText": "", "score": "93.99%", "isRemoved": true}, {"id": 81, "text": "```def askIP():\n    TheIP = raw_input('Okay, what is it? E.X 112.13.141.9: ')\n    if AskYesNo('Are you sure '+TheIP+' is the correct IP? You will not be able to change this later!!') != True:\n        print('Ok, get it right this time!');\n        return askIP()\n    else:\n        return TheIP\n```", "isBot": true, "highlightedText": "", "score": "93.99%", "liked": false, "disliked": true, "feedback": "not an answer to my question", "isRemoved": true}, {"id": 82, "text": "Question: Test if an internet connection is present in python with a score of 93.93%", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 83, "text": "```import socket\nREMOTE_SERVER = \"www.google.com\"\ndef is_connected():\n  try:\n    # see if we can resolve the host name -- tells us if there is\n    # a DNS listening\n    host = socket.gethostbyname(REMOTE_SERVER)\n    # connect to the host -- tells us if the host is actually\n    # reachable\n    s = socket.create_connection((host, 80), 2)\n    return True\n  except:\n     pass\n  return False\nprint is_connected()\n```", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 84, "text": "Question: How to strip last bits from ip address with a score of 93.93%", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 85, "text": "```import ipaddress\n\ndef strip_addr(ip, bits):\n    nwif = ipaddress.ip_interface(u'%s/%s' % (ip, bits))\n    return str(nwif.network.network_address)\n\nassert strip_addr(u'1.2.3.4', 24) == u'1.2.3.0'\nassert strip_addr(u'2001:1234:f678::9', 33) == u'2001:1234:8000::'\n```", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 86, "text": "Question: Use script to send string through socket with a score of 93.90%", "isBot": true, "highlightedText": "", "score": "93.90%"}, {"id": 87, "text": "```import socket\nfrom struct import pack\nhost='ip_to_connect_to'\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((host,port_to_connect_to))\nanswer=s.recv(1024)\nprint answer\npadding=800 * \"A\"\n\ns.send(padding)\n```", "isBot": true, "highlightedText": "", "score": "93.90%", "liked": true, "disliked": false}, {"id": 88, "text": "Question: determine if two IP addresses can communicate with a score of 93.73%", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 89, "text": "```>>> import ipaddress\n>>> ip1 = ipaddress.IPv4Address('192.168.0.1')\n>>> ip2 = ipaddress.IPv4Address('192.168.0.2')\n>>> ip3 = ipaddress.IPv4Address('192.168.1.1')\n>>> net = ipaddress.IPv4Network('192.168.0.0/24')\n>>> ip1 in net\nTrue\n>>> ip2 in net\nTrue\n>>> ip3 in net\nFalse\n>>> \n```", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 90, "text": "I classified your question with the following intent: code_concept And found these entities: address: operation, securely: response, network: query", "isBot": true}], "2023-05-08T09:30:00.101191": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "Group two arrays of products per category and filter out the categories with values below 100", "isBot": false, "highlightedText": "<span class=\"entity-undefined\">Group<span class=\"label\">[undefined]</span></span> two <span class=\"entity-operation\">arrays<span class=\"label\">[operation]</span></span> of products <span class=\"entity-query\">per<span class=\"label\">[query]</span></span> category and <span class=\"entity-operation\">filter<span class=\"label\">[operation]</span></span> out the categories with values below <span class=\"entity-query\">100<span class=\"label\">[query]</span></span>", "intent": "code_concept"}, {"id": 1, "text": "1. Question: Pandas use groupby to apply a different function for each value of the groupby variable with a score of 94.09%", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 2, "text": "```df.groupby('Category').apply(lambda r: function_map[r.name](r.Total))\n```", "isBot": true, "highlightedText": "", "score": "94.09%", "liked": true, "disliked": false}, {"id": 3, "text": "2. Question: Pandas drop rare entries with a score of 94.07%", "isBot": true, "highlightedText": "", "score": "94.07%", "isRemoved": true}, {"id": 4, "text": "```a = data.groupby('product_id').filter(lambda x: len(x) > 20)\n```", "isBot": true, "highlightedText": "", "score": "94.07%", "liked": false, "disliked": true, "feedback": "", "isRemoved": true}, {"id": 5, "text": "3. Question: Fetching data from Many to Many relationship (intermediate table) with a score of 93.77%", "isBot": true, "highlightedText": "", "score": "93.77%"}, {"id": 6, "text": "```category = Category.objects.get(pk=10)\nproducts = category.product_set.all()  # note that this is a queryset\n```", "isBot": true, "highlightedText": "", "score": "93.77%"}, {"id": 7, "text": "4. Question: How to calculate percent change compared to the beginning value using pandas? with a score of 93.35%", "isBot": true, "highlightedText": "", "score": "93.35%"}, {"id": 8, "text": "```df.groupby('security')['price'].apply(lambda x: x.div(x.iloc[0]).subtract(1).mul(100))\n```", "isBot": true, "highlightedText": "", "score": "93.35%"}, {"id": 9, "text": "5. Question: Using Pandas how do I count groups of data? with a score of 93.33%", "isBot": true, "highlightedText": "", "score": "93.33%"}, {"id": 10, "text": "```df.groupby(pd.cut(df['purity.score'], bins=10)).count()\n```", "isBot": true, "highlightedText": "", "score": "93.33%"}, {"id": 11, "text": "6. Question: Pandas multiindex boolean indexing with a score of 93.02%", "isBot": true, "highlightedText": "", "score": "93.02%"}, {"id": 12, "text": "```df.groupby(level=0).filter(lambda x: all([c > 1 for v in x['c']]))\n```", "isBot": true, "highlightedText": "", "score": "93.02%", "liked": true, "disliked": false}, {"id": 13, "text": "7. Question: Python Pandas: Aggregate my indexes into a range of ages with a score of 92.93%", "isBot": true, "highlightedText": "", "score": "92.93%"}, {"id": 14, "text": "```groups = df.groupby((pd.cut(df.age, bins), 'gender'))\noutput = groups.sum().dropna()\n```", "isBot": true, "highlightedText": "", "score": "92.93%"}, {"id": 15, "text": "8. Question: Sort by grouping using first occurence in python? with a score of 92.89%", "isBot": true, "highlightedText": "", "score": "92.89%"}, {"id": 16, "text": "```categories = [item.category for item in my_list]\nmy_list.sort(key = lambda item: categories.index(item.category))\n```", "isBot": true, "highlightedText": "", "score": "92.89%"}, {"id": 17, "text": "9. Question: How to get 3rd level Object count in Django with a score of 92.82%", "isBot": true, "highlightedText": "", "score": "92.82%"}, {"id": 18, "text": "```ShopProduct.objects.filter(subcategory__category__section=my_section)\n```", "isBot": true, "highlightedText": "", "score": "92.82%"}, {"id": 19, "text": "10. Question: Decile Pandas DataFrame on column with a score of 92.76%", "isBot": true, "highlightedText": "", "score": "92.76%"}, {"id": 20, "text": "``` df.groupby(pd.qcut(beta.res,10)).mean()\n```", "isBot": true, "highlightedText": "", "score": "92.76%"}, {"id": 21, "text": "I classified your question with the following intent: code_concept And found these entities: 100: query, group: operation, arrays: operation, per: query, filter: operation", "isBot": true}, {"id": 22, "text": "How to change all values in an array from floats to percentages with two decimals?", "isBot": false, "highlightedText": "How to <span class=\"entity-query\">change all<span class=\"label\">[query]</span></span> values in an <span class=\"entity-operation\">array from<span class=\"label\">[operation]</span></span> floats to <span class=\"entity-operation\">percentages<span class=\"label\">[operation]</span></span> with two <span class=\"entity-operation\">decimals<span class=\"label\">[operation]</span></span>?", "intent": "code_search"}, {"id": 23, "text": "1. Question: python function which edits different arrays with a score of 93.96%", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 24, "text": "```def convert(arr):\n    return [int(float(x))*8 for x in arr]\n\nf1 = convert(f1)\nf2 = convert(f2)\nf3 = convert(f3)\n```", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 25, "text": "2. Question: Rounding to nearest int with numpy.rint() not consistent for .5 with a score of 93.74%", "isBot": true, "highlightedText": "", "score": "93.74%"}, {"id": 26, "text": "```Notes\n-----\nFor values exactly halfway between rounded decimal values, Numpy\nrounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0,\n-0.5 and 0.5 round to 0.0, etc. Results may also be surprising due\nto the inexact representation of decimal fractions in the IEEE\nfloating point standard [1]_ and errors introduced when scaling\nby powers of ten.\n```", "isBot": true, "highlightedText": "", "score": "93.74%"}, {"id": 27, "text": "3. Question: Python conditionally round up numbers with a score of 93.44%", "isBot": true, "highlightedText": "", "score": "93.44%"}, {"id": 28, "text": "```def round_up(value, multiple):\n    return multiple * math.ceil(float(value) / multiple)\n\ndef digits(value):\n    return int(math.log(value, 10)) + 1\n\ndef round_price(value):\n    if value < 10000:\n        return int(round_up(value, 1000))\n    d = digits(value)\n    new_value = int(round_up(value, 10 ** (d - 2)))\n    new_value -= 10 ** (d - 3)\n    return new_value\n```", "isBot": true, "highlightedText": "", "score": "93.44%"}, {"id": 29, "text": "4. Question: Percentage with variable precision with a score of 93.41%", "isBot": true, "highlightedText": "", "score": "93.41%"}, {"id": 30, "text": "```import math\ndef format_percentage(x, precision=3):\n    return (\"%%.%df%%%%\" % (precision - min(0,math.log10(100-x)))) % x\n```", "isBot": true, "highlightedText": "", "score": "93.41%"}, {"id": 31, "text": "5. Question: convert a list with decimal number and data type to just numbers with a score of 93.33%", "isBot": true, "highlightedText": "", "score": "93.33%"}, {"id": 32, "text": "```>>> from decimal import Decimal\n>>> a = [Decimal('0.4441'), Decimal('0.3821'), Decimal('0.4414'), Decimal('0.3391')]\n>>> a = [float(n) for n in a]\n>>> a\n[0.4441, 0.3821, 0.4414, 0.3391]\n```", "isBot": true, "highlightedText": "", "score": "93.33%"}, {"id": 33, "text": "6. Question: Removing all commas from list in Python with a score of 93.28%", "isBot": true, "highlightedText": "", "score": "93.28%"}, {"id": 34, "text": "```# Get an array of numbers\nnumbers = map(float, '1,2,3,4'.split(','))\n\n# Now get the sum\ntotal = sum(numbers)\n```", "isBot": true, "highlightedText": "", "score": "93.28%"}, {"id": 35, "text": "7. Question: Convert number to string scientific notation fixed length with a score of 93.18%", "isBot": true, "highlightedText": "", "score": "93.18%"}, {"id": 36, "text": "```precision = 2\nnumber_to_convert = 10000\nprint \"%0.*e\"%(precision,number_to_convert)\n```", "isBot": true, "highlightedText": "", "score": "93.18%"}, {"id": 37, "text": "8. Question: Pythonic way to \"round()\" like Javascript \"Math.round()\"? with a score of 93.17%", "isBot": true, "highlightedText": "", "score": "93.17%"}, {"id": 38, "text": "```import math\ndef roundthemnumbers(value):\n    x = math.floor(value)\n    if (value - x) < .50:\n        return x\n    else:\n        return math.ceil(value)\n```", "isBot": true, "highlightedText": "", "score": "93.17%"}, {"id": 39, "text": "9. Question: How to round float down to a given precision? with a score of 93.10%", "isBot": true, "highlightedText": "", "score": "93.10%"}, {"id": 40, "text": "```>>> import math\n>>> def round_down(num,digits):\n        factor = 10.0 ** digits\n        return math.floor(num * factor) / factor\n\n>>> round_down(2.667,2)\n2.66\n```", "isBot": true, "highlightedText": "", "score": "93.10%"}, {"id": 41, "text": "10. Question: Using python map to replace all floats in a list with rounded floats of type str with a score of 93.06%", "isBot": true, "highlightedText": "", "score": "93.06%"}, {"id": 42, "text": "```pattern = \"%.4f\"\nfloats = [pattern % i for i in floats]\n```", "isBot": true, "highlightedText": "", "score": "93.06%"}, {"id": 43, "text": "I classified your question with the following intent: code_search And found these entities: change all: query, array from: operation, percentages: operation, decimals: operation", "isBot": true}, {"id": 44, "text": "How to remove all user permissions in Azure for someone who will not be working at the company any longer?", "isBot": false, "highlightedText": "How to remove <span class=\"entity-rating\">all<span class=\"label\">[rating]</span></span> user <span class=\"entity-query\">permissions<span class=\"label\">[query]</span></span> in Azure for someone who will not be <span class=\"entity-query\">working at<span class=\"label\">[query]</span></span> the <span class=\"entity-response\">company<span class=\"label\">[response]</span></span> any longer?", "intent": "code_search"}, {"id": 45, "text": "1. Question: Webservice - Use username in function after login with a score of 92.36%", "isBot": true, "highlightedText": "", "score": "92.36%"}, {"id": 46, "text": "```@app.route('/users/change_password/', methods=['PUT'])\n@auth.login_required\ndef changeUserPassword(user):\n    return auth.username() + \", You want to change your password\"\n```", "isBot": true, "highlightedText": "", "score": "92.36%", "liked": true, "disliked": false}, {"id": 47, "text": "2. Question: Excluding the two types of users in django with a score of 91.90%", "isBot": true, "highlightedText": "", "score": "91.90%"}, {"id": 48, "text": "```User.objects.all().exclude(id=settings.ANONYMOUS_USER_ID) \\\n                  .exclude(is_superuser=True)\n```", "isBot": true, "highlightedText": "", "score": "91.90%", "liked": true, "disliked": false}, {"id": 49, "text": "3. Question: Azure sdk for python with a score of 91.87%", "isBot": true, "highlightedText": "", "score": "91.87%"}, {"id": 50, "text": "```from azure.common.credentials import ServicePrincipalCredentials\nfrom azure.mgmt.compute import ComputeManagementClient, ComputeManagementClientConfiguration\n\ncredentials = ServicePrincipalCredentials(\n    client_id = '<client-id>',\n    secret = '<key>',\n    tenant = '<tenant-id>'\n)\n\nsubscription_id = '<subscription-id>'\n\ncompute_config = ComputeManagementClientConfiguration(credentials, subscription_id, api_version='2015-05-01-preview')\ncompute_client = ComputeManagementClient(compute_config)\nresource_group_name = '<resource-group>'\nvm_name = '<vm-name>'\nresult = compute_client.virtual_machines.deallocate(resource_group_name, vm_name)\n```", "isBot": true, "highlightedText": "", "score": "91.87%"}, {"id": 51, "text": "4. Question: How to implement \"login as\" admin function with `stormpath-flask` with a score of 91.80%", "isBot": true, "highlightedText": "", "score": "91.80%"}, {"id": 52, "text": "```from flask.ext.stormpath import login_user\nfrom flask.ext.stormpath.models import User\n\nfrom app import stormpath_manager\n\n\n# ...\n\n\nmain_cloud_directory = stormpath_manager.client.directories.search({\n    'name': 'Directory Name'\n})[0]\naccounts = main_cloud_directory.accounts.search({'email': email})\n\nif accounts.size == 1:\n    account = accounts[0]\n    account.__class__ = User\n    login_user(account, remember=False)\n\n    return redirect('/settings')\nelse:\n    abort(404)\n```", "isBot": true, "highlightedText": "", "score": "91.80%"}, {"id": 53, "text": "5. Question: How to update a remote ms access database? with a score of 91.69%", "isBot": true, "highlightedText": "", "score": "91.69%"}, {"id": 54, "text": "```\nexposes the machine to unauthorized access\n```", "isBot": true, "highlightedText": "", "score": "91.69%", "liked": false, "disliked": true}, {"id": 55, "text": "6. Question: WebTest: Testing with decorators + datastore calls with a score of 91.68%", "isBot": true, "highlightedText": "", "score": "91.68%"}, {"id": 56, "text": "```def user_ok(self):\n    key_name = 'info@example.com'\n    new_user = Profile(key_name=key_name)\n    new_user.put()\n\n    os.environ['USER_EMAIL'] = key_name\n    os.environ['USER_ID'] = key_name\n    os.environ['USER_IS_ADMIN'] = ''\n    response = self.get( '/appindex' )\n    self.assertOK(response)\n\n    # Now let's reset it to check that the user will be redirected.\n    new_user.delete()\n    response = self.get( '/appindex' )\n    self.assertEqual(response.headers['Location'], 'http://localhost/newuser')\n```", "isBot": true, "highlightedText": "", "score": "91.68%"}, {"id": 57, "text": "7. Question: Django complex Query through database API with a score of 91.67%", "isBot": true, "highlightedText": "", "score": "91.67%"}, {"id": 58, "text": "```profile = EnterpriseProfile.objects.get(pk=1)  # or whatever to get the object\n# next returns all users related to that enterprise in the M2M\nprofile.enterprise.users.all()  \n```", "isBot": true, "highlightedText": "", "score": "91.67%"}, {"id": 59, "text": "8. Question: decorating login_required Django decorator with a score of 91.64%", "isBot": true, "highlightedText": "", "score": "91.64%"}, {"id": 60, "text": "```def check_permanent_password(user):\n    return not user.temporary_password\n\n@login_required(login_url)\n@user_passes_test(check_temporary_password, login_url=settings.SET_PERMANENT_PASSWORD_URL)\ndef view(request):\n    # your view\n```", "isBot": true, "highlightedText": "", "score": "91.64%"}, {"id": 61, "text": "9. Question: How to send_mail to Users in group in Django? with a score of 91.62%", "isBot": true, "highlightedText": "", "score": "91.62%"}, {"id": 62, "text": "```from django.contrib.auth.models import User, Permission\nfrom django.db.models import Q\n\nperm = Permission.objects.get(codename='consultant_permission')  \nusers = User.objects.filter(Q(groups__permissions=perm) | Q(user_permissions=perm) ).distinct()\nrecipients = list(i for i in users.values_list('email', flat=True) if bool(i))\n```", "isBot": true, "highlightedText": "", "score": "91.62%"}, {"id": 63, "text": "10. Question: Generating encrypted passwords in mysql, to populate a django database with a score of 91.59%", "isBot": true, "highlightedText": "", "score": "91.59%"}, {"id": 64, "text": "```from django.contrib.auth import authenticate\n\nfor username, password in get_usernames_and_passwords():\n    if authenticate(username=username, password=password) is None:\n        print \"Failed to authenticate user {!r}\".format(username)\n```", "isBot": true, "highlightedText": "", "score": "91.59%"}, {"id": 65, "text": "I classified your question with the following intent: code_search And found these entities: all: rating, permissions: query, working at: query, company: response", "isBot": true}], "2023-05-08T12:21:46.520394": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "How do I connect my Figma design through a python script?", "isBot": false, "highlightedText": "How do I <span class=\"entity-operation\">connect<span class=\"label\">[operation]</span></span> my <span class=\"entity-operation\">Figma<span class=\"label\">[operation]</span></span> design <span class=\"entity-query\">through a<span class=\"label\">[query]</span></span> <span class=\"entity-proglanguage\">python<span class=\"label\">[proglanguage]</span></span> <span class=\"entity-proglanguage\">script<span class=\"label\">[proglanguage]</span></span>?", "intent": "code_search"}, {"id": 1, "text": "1. Question: Pymongo and stored javascript with a score of 94.78%", "isBot": true, "highlightedText": "", "score": "94.78%"}, {"id": 2, "text": "```...\ndatabase_connection = conn.my_database\n# Here is the magic:\nprint database_connection.system_js.my_func(['a', 'b'], ['c', 'd'])\n```", "isBot": true, "highlightedText": "", "score": "94.78%"}, {"id": 3, "text": "2. Question: Test to see if URL exists with a score of 94.30%", "isBot": true, "highlightedText": "", "score": "94.30%"}, {"id": 4, "text": "```import httplib\n\ntry:\n    url = httplib.HTTPConnection('yahoo.com')\n    url.connect()\nexcept httplib.HTTPException as ex:\n    print \"not connected\"\n```", "isBot": true, "highlightedText": "", "score": "94.30%"}, {"id": 5, "text": "3. Question: How to save a python script directly from python shell? with a score of 94.30%", "isBot": true, "highlightedText": "", "score": "94.30%"}, {"id": 6, "text": "```Python 2.7.1 |EPD 7.0-2 (32-bit)| (r271:86832, Nov 29 2010, 13:52:51) \nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 0.10.1 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object'. ?object also works, ?? prints more.\n\nIn [2]: print \"Hello world.\"\nHello world.\n\nIn [3]: print \"Hello world again.\"\nHello world again.\n\nIn [4]: fid = open(\"myscript.py\", \"w\")\n\nIn [5]: for i in range(2,4):\n   ...:     fid.write(In[i])\n   ...: \n\nIn [6]: fid.close()\n\nIn [7]: run myscript.py\nHello world.\nHello world again.\n```", "isBot": true, "highlightedText": "", "score": "94.30%"}, {"id": 7, "text": "4. Question: How to debug a python - c++ program with a score of 94.22%", "isBot": true, "highlightedText": "", "score": "94.22%"}, {"id": 8, "text": "```(gdb) target exec python\n(gdb) run\n >>> import your_extension as ye\n >>> ye.do_something ()\n >>> # do your python here\n >>> # or just run your python script from here\n(gdb) do debugging stuff\n```", "isBot": true, "highlightedText": "", "score": "94.22%"}, {"id": 9, "text": "5. Question: How to check lines from a file in Python 2.7? with a score of 94.09%", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 10, "text": "```fob = open('C:\\Users\\Joshua\\Desktop\\Database.txt','r')\nlogins = fob.readline()\nfob.close()\n#...\nif accounter in logins:\n    print 'You are in!!'\nelse:\n    print 'Why did it not work?!'\n```", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 11, "text": "6. Question: Emulation of lex like functionality in Perl or Python with a score of 94.09%", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 12, "text": "```#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse WWW::Mechanize;\n\nmy $mech = WWW::Mechanize->new;\n\n$mech->get(\"http://stackoverflow.com/\");\n\n$mech->success or die \"Oh no! Couldn't fetch stackoverflow.com\";\n\nforeach my $link ($mech->links) {\n    print \"* [\",$link->text, \"] points to \", $link->url, \"\\n\";\n}\n```", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 13, "text": "7. Question: Using bottle.py to print on browser with a score of 94.06%", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 14, "text": "```import pymysql\nfrom bottle import Bottle,run\n\napp = Bottle()\n\n@app.route('/conn')\ndef conn():\n    yield \"Trying to connect to database...\"\n    try:\n        conn = pymysql.connect(user=\"X\",passwd=\"X\",host=\"X\",port=X,database=\"X\")\n        yield \"Connection succeded\"\n    except:\n        yield \"Oops...connection failed\"\n\nrun(app, host='localhost',port = 8080)\n```", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 15, "text": "8. Question: Best practice for database connection in recursive function? with a score of 94.04%", "isBot": true, "highlightedText": "", "score": "94.04%"}, {"id": 16, "text": "```# script.py\n\nconn = mysql.connector.connect(\n        user = \"myuser\",\n        password = \"SuperSecretPassword\",\n        host = \"127.0.0.1\",\n        database = \"MyDatabase\")\n\n\ndef MyFunc(x, y):\n\n    # Process some data here, then write it to the DB\n\n    cursor = conn.cursor() \n    cursor.execute(\"INSERT INTO table a, b, c VALUES(1,2,3)\")\n    conn.commit()\n\n    MyFunc(x, y)\n```", "isBot": true, "highlightedText": "", "score": "94.04%"}, {"id": 17, "text": "9. Question: How to create a module object by content in Python with a score of 93.96%", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 18, "text": "```content = \"import math\\n\\ndef f(x):\\n    return math.log(x)\"\n\nimport imp\nmy_module = imp.new_module('my_module')\nexec content in my_module.__dict__ # in python 3, use exec() function\n\nprint my_module.f(2)\n```", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 19, "text": "10. Question: django heterogeneous queryset proxy models with a score of 93.94%", "isBot": true, "highlightedText": "", "score": "93.94%"}, {"id": 20, "text": "```def connect(self):\n    return getattr(self, \"connect_%s\" % self.type)()\n\ndef connect_aol(self):\n    pass # AOL stuff\n\ndef connect_yahoo(self):\n    pass # Yahoo! stuff\n```", "isBot": true, "highlightedText": "", "score": "93.94%"}, {"id": 21, "text": "I classified your question with the following intent: code_search And found these entities: connect: operation, Figma: operation, through a: query, python: proglanguage, script: proglanguage", "isBot": true}, {"id": 22, "text": "How can I create an easy frontend application from my design file from Figma?", "isBot": false, "highlightedText": "How c<span class=\"entity-operation\">an<span class=\"label\">[operation]</span></span> I create <span class=\"entity-operation\">an<span class=\"label\">[operation]</span></span> <span class=\"entity-response\">easy<span class=\"label\">[response]</span></span> frontend application <span class=\"entity-query\">from<span class=\"label\">[query]</span></span> my design file <span class=\"entity-query\">from<span class=\"label\">[query]</span></span> Figma?", "intent": "code_search"}, {"id": 23, "text": "1. Question: How to open html containing framset using flask framework with a score of 93.89%", "isBot": true, "highlightedText": "", "score": "93.89%"}, {"id": 24, "text": "```from flask import Flask,render_template\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef hello_world():\n    return render_template(\"index.html\")\n\n@app.route('/pic.html')\ndef pic():\n    return render_template(\"pic.html\")\n\nif __name__ == '__main__':\n    app.run()\n```", "isBot": true, "highlightedText": "", "score": "93.89%", "liked": true, "disliked": false}, {"id": 25, "text": "2. Question: Web interface for a twisted application with a score of 93.84%", "isBot": true, "highlightedText": "", "score": "93.84%"}, {"id": 26, "text": "```# make a Flask app\nfrom flask import Flask, render_template, g\napp = Flask(__name__)\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n# run in under twisted through wsgi\nfrom twisted.web.wsgi import WSGIResource\nfrom twisted.web.server import Site\n\nresource = WSGIResource(reactor, reactor.getThreadPool(), app)\nsite = Site(resource)\n\n# bind it etc\n# ...\n```", "isBot": true, "highlightedText": "", "score": "93.84%", "liked": true, "disliked": false}, {"id": 27, "text": "3. Question: Serving static json data to flask with a score of 93.67%", "isBot": true, "highlightedText": "", "score": "93.67%"}, {"id": 28, "text": "```from flask import Flask, render_template\nfrom flask import url_for\n\napp = Flask(__name__, static_url_path='/static')\n\n\n@app.route('/')\ndef home():\n    return render_template('home.html')\n\n\n@app.route('/send')\ndef send():\n    return \"<a href=%s>file</a>\" % url_for('static', filename='demo_data.json')\n\n\nif __name__ == '__main__':\n    app.run()\n```", "isBot": true, "highlightedText": "", "score": "93.67%"}, {"id": 29, "text": "4. Question: Passing static JSON to Django Template - best practices? with a score of 93.65%", "isBot": true, "highlightedText": "", "score": "93.65%"}, {"id": 30, "text": "```mydata = simplejson.loads(json_file)\n\ndef foo(request):\n    ...\n    return render(request, 'template.html', {\"mydata\": mydata},\n        content_type=\"application/xhtml+xml\")\n```", "isBot": true, "highlightedText": "", "score": "93.65%"}, {"id": 31, "text": "5. Question: Resolving template block structure conflicts with third-party django apps with a score of 93.60%", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 32, "text": "```my-sitebase.html\n |-- app-base.html\n   |-- app-foo-template.html\n```", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 33, "text": "6. Question: Adding new app in appengine with a score of 93.59%", "isBot": true, "highlightedText": "", "score": "93.59%"}, {"id": 34, "text": "```import webapp\nfrom google.appengine.ext.webapp.util import run_wsgi_app\n\nclass MainPage(webapp.RequestHandler):\n    def get(self):\n        self.response.out.write('Hello, World')\n\napp = webapp2.WSGIApplication([('/', MainPage)])\n\ndef main():\n    application = webapp.WSGIApplication([(\"/\", MainPage)], debug=True)\n    run_wsgi_app(application)\n\nif __name__ == \"__main__\":\n    main()\n```", "isBot": true, "highlightedText": "", "score": "93.59%"}, {"id": 35, "text": "7. Question: Incorporating existing Python program into Django website with a score of 93.57%", "isBot": true, "highlightedText": "", "score": "93.57%"}, {"id": 36, "text": "```my_app\n  views\n    __init__.py\n    example_view_1.py\n    example_view_2.py\n    some_module\n      __init__.py\n      another_view.py\n    ...\n  models\n    (all my app's models)\n  helpers\n    (helper modules)\n  backends\n    (authentication backends)\n  forms\n    (django forms)\n\nthird_party\n  (all third party packages - I use GAE so I must upload them)\n```", "isBot": true, "highlightedText": "", "score": "93.57%"}, {"id": 37, "text": "8. Question: How to render template directly without having a handler with a score of 93.55%", "isBot": true, "highlightedText": "", "score": "93.55%"}, {"id": 38, "text": "```# app.yaml\n- url: /rest/.*\n  script: main.app\n\n# main.py\nclass PageHandler(webapp2.RequestHandler):\n    def get(self, page):\n        if not page.endswith('.html'):\n            page += '.html'\n        self.response.write(self.jinja2.render_template(page))\n\napp = webapp2.WSGIApplication([\n    webapp2.RedirectRoute('/rest/<page>', PageHandler, name='page'),\n], debug=True)\n```", "isBot": true, "highlightedText": "", "score": "93.55%"}, {"id": 39, "text": "9. Question: Web application with python with a score of 93.54%", "isBot": true, "highlightedText": "", "score": "93.54%"}, {"id": 40, "text": "```from flask import Flask, request\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef main():\n    return 'You could import render_template at the top, and use that here instead'\n\n@app.route('/do_stuff', methods=['POST'])\ndef do_stuff():\n    return 'You posted' + request.form.get('your string')\n\napp.run('127.0.0.1', port=5555, debug=True)\n```", "isBot": true, "highlightedText": "", "score": "93.54%", "liked": true, "disliked": false}, {"id": 41, "text": "10. Question: Pyramid project structure with a score of 93.52%", "isBot": true, "highlightedText": "", "score": "93.52%"}, {"id": 42, "text": "```# myapp/__init__.py (main config)\ndef main(global_config, **settings):\n    config = Configurator(...)\n    # basic setup of your app\n    config.include('pyramid_tm')\n    config.include('pyramid_jinja2')\n\n    # add config for each of your subapps\n    config.include('project.app1')\n    config.include('project.app2')\n\n    # make wsgi app\n    return config.make_wsgi_app()\n\n# myapp/app1/__init__.py (app1's config)\ndef includeme(config):\n    config.add_route(...)\n    config.scan()\n\n# myapp/app2/__init__.py (app2's config)\ndef includeme(config):\n    config.add_route(...)\n    config.scan()\n```", "isBot": true, "highlightedText": "", "score": "93.52%"}, {"id": 43, "text": "I classified your question with the following intent: code_search And found these entities: an: operation, easy: response, from: query", "isBot": true}, {"id": 44, "text": "How do I pass data from my excel file into the frontend of my app?", "isBot": false, "highlightedText": "How do I pass <span class=\"entity-operation\">data<span class=\"label\">[operation]</span></span> from my excel file into the frontend of my app?", "intent": "code_search"}, {"id": 45, "text": "1. Question: check if a file is open in Python with a score of 95.62%", "isBot": true, "highlightedText": "", "score": "95.62%"}, {"id": 46, "text": "```try:\n    myfile = open(\"myfile.csv\", \"r+\") # or \"a+\", whatever you need\nexcept IOError:\n    print \"Could not open file! Please close Excel!\"\n\nwith myfile:\n    do_stuff()\n```", "isBot": true, "highlightedText": "", "score": "95.62%", "liked": true, "disliked": false}, {"id": 47, "text": "2. Question: django-import-export outside admin with a score of 95.58%", "isBot": true, "highlightedText": "", "score": "95.58%"}, {"id": 48, "text": "```from import_export.formats.base_formats import XLS\n\ndef your_view():\n    filehandle = form.cleaned_data['file']\n    data = bytes()\n        for chunk in import_file.chunks():\n            data += chunk\n    dataset = XLS().create_dataset(data)\n    result = ExportSpec().import_data(...)\n```", "isBot": true, "highlightedText": "", "score": "95.58%"}, {"id": 49, "text": "3. Question: How to achieve one to one mapping between elements just like dictionaries but allowing duplicates also? with a score of 95.53%", "isBot": true, "highlightedText": "", "score": "95.53%"}, {"id": 50, "text": "```from xlrd import open_workbook\n\n\ndata = []\n\ndef get_data():\n    filename = \"Demo.xlsx\"\n    exl_file = open_workbook(filename)\n    sheet = exl_file.sheet_by_index(0)\n    for row_index in range(1,4):\n            col_a_data = sheet.cell(row_index,0).value\n            col_b_data = sheet.cell(row_index,1).value\n            data.append({col_a_data:col_b_data});\n\nget_data()\n\nprint data\n```", "isBot": true, "highlightedText": "", "score": "95.53%", "liked": true, "disliked": false}, {"id": 51, "text": "4. Question: Dynamically Parsing a worksheet in Pandas using Python 3 with a score of 95.45%", "isBot": true, "highlightedText": "", "score": "95.45%"}, {"id": 52, "text": "```var = input(\"Enter the path for the Excel file you want to use: \")\nimport pandas as pd\nxl = pd.ExcelFile(var)\ndf = xl.parse(sheetname=0)\ndf.head()\n```", "isBot": true, "highlightedText": "", "score": "95.45%"}, {"id": 53, "text": "5. Question: how to get data from csv file in python with a score of 95.43%", "isBot": true, "highlightedText": "", "score": "95.43%"}, {"id": 54, "text": "```import csv\nfile_data = self.request.get('file_in')\nfile_data_list = file_data.split('\\n')\nfile_Reader = csv.reader(file_data_list)\nfor fields in file_Reader:\n    print row\n```", "isBot": true, "highlightedText": "", "score": "95.43%", "liked": true, "disliked": false}, {"id": 55, "text": "6. Question: How to merge vertically several csv files in Python? with a score of 95.31%", "isBot": true, "highlightedText": "", "score": "95.31%"}, {"id": 56, "text": "```import csv\n\nspreadsheet_filenames = [\n    '0113_RE_fscom.csv',\n    '0213_RE_fscom.csv',\n]\n\nfor filename in spreadsheet_filenames:\n    with open(filename, 'r') as csvfile:\n        sales = csv.reader(csvfile)\n        for row in sales:\n            print row\n```", "isBot": true, "highlightedText": "", "score": "95.31%", "liked": true, "disliked": false}, {"id": 57, "text": "7. Question: Custom Python CSV delimiter with a score of 95.30%", "isBot": true, "highlightedText": "", "score": "95.30%"}, {"id": 58, "text": "```import csv\n\nif __name__ == '__main__':\n    file_path = r\"/your/file/path/here.csv\"\n    file_handle = open(file_path, \"r\")\n    csv_handle = csv.reader(file_handle)\n    # Now you can work with the *values* in the csv file.\n```", "isBot": true, "highlightedText": "", "score": "95.30%"}, {"id": 59, "text": "8. Question: Download JSON data and convert it to CSV using Python with a score of 95.24%", "isBot": true, "highlightedText": "", "score": "95.24%"}, {"id": 60, "text": "```import urllib2\nimport json\nimport csv\n\ndef getRows(data):\n    # ?? this totally depends on what's in your data\n    return []\n\nurl = \"http://www.yahoo.com/something\"\ndata = urllib2.urlopen(url).read()\ndata = json.loads(data)\n\nfname = \"mydata.csv\"\nwith open(fname,'wb') as outf:\n    outcsv = csv.writer(outf)\n    outcsv.writerows(getRows(data))\n```", "isBot": true, "highlightedText": "", "score": "95.24%"}, {"id": 61, "text": "9. Question: Whats the pythonic way to convert a heterogenous list of scalars into a string with a score of 95.24%", "isBot": true, "highlightedText": "", "score": "95.24%"}, {"id": 62, "text": "```import csv\n\ndata_row = [1, 2.0, \"three\", \"pi,plus,one\"]\n\n# Assuming Python 2.x\n# ...in Python 3 use text mode: open(\"...\", 'w', newline='')\nwith open(\"datafile.csv\", 'wb') as datafile:\n    datawriter = csv.writer(datafile)\n    datawriter.writerow(data_row)\n```", "isBot": true, "highlightedText": "", "score": "95.24%"}, {"id": 63, "text": "10. Question: How to write a complex nested list to a csv file without brackets in python? with a score of 95.22%", "isBot": true, "highlightedText": "", "score": "95.22%"}, {"id": 64, "text": "```with open('myfile.csv', 'w') as f:\n        w = csv.writer(f, dialect = 'excel-tab') #use `delimiter = ','` for ',' in file\n        for item in data:\n            lis = [item[0]] +   [y for x in item[1] for y in x]\n            w.writerow(lis)\n```", "isBot": true, "highlightedText": "", "score": "95.22%"}, {"id": 65, "text": "I classified your question with the following intent: code_search And found these entities: data: operation", "isBot": true}, {"id": 66, "text": "How do I make a button which updates a database value when it is clicked?", "isBot": false, "highlightedText": ""}, {"id": 67, "text": "I'm sorry I was unable to use intent modelling to classify your question to query the search engine. Could you please rephrase?", "isBot": true}, {"id": 68, "text": "How to make a button that updates a database value when it is clicked?", "isBot": false, "highlightedText": "How to make a button that updates a <span class=\"entity-query\">database<span class=\"label\">[query]</span></span> value when it is clicked?", "intent": "code_search"}, {"id": 69, "text": "1. Question: How to generate lambda functions within for with a score of 95.11%", "isBot": true, "highlightedText": "", "score": "95.11%"}, {"id": 70, "text": "``` button.bind(\"<Enter>\", lambda name, button=button: button.config(bg=hovercolor))\n```", "isBot": true, "highlightedText": "", "score": "95.11%"}, {"id": 71, "text": "2. Question: Multiple buttons to call same function in python Gtk with a score of 94.96%", "isBot": true, "highlightedText": "", "score": "94.96%"}, {"id": 72, "text": "```for button in buttonslist: \n    button.connect(\"clicked\",button_function)\n```", "isBot": true, "highlightedText": "", "score": "94.96%"}, {"id": 73, "text": "3. Question: GUI: passing arguments to a function when pressing button with a score of 94.75%", "isBot": true, "highlightedText": "", "score": "94.75%"}, {"id": 74, "text": "```self.ui.button1.clicked.connect(lambda:test(True))\nself.ui.button2.clicked.connect(lambda:test(False))\n```", "isBot": true, "highlightedText": "", "score": "94.75%"}, {"id": 75, "text": "4. Question: Redraw widgets with update with a score of 94.74%", "isBot": true, "highlightedText": "", "score": "94.74%"}, {"id": 76, "text": "```def update_the_widgets():\n    the_label.configure(background=\"red\")\n\na_button = tk.Button(..., command=update_the_widgets)\nthe_label = tk.Label(..., background=\"green\")\n```", "isBot": true, "highlightedText": "", "score": "94.74%"}, {"id": 77, "text": "5. Question: How to change colour text from a tkinter.button with a score of 94.74%", "isBot": true, "highlightedText": "", "score": "94.74%"}, {"id": 78, "text": "```btn_enter = Tkinter.Button(all_your_args, fg=your_desired_value)\n```", "isBot": true, "highlightedText": "", "score": "94.74%"}, {"id": 79, "text": "6. Question: kivy add a button to a specific location when pressing another button with a score of 94.73%", "isBot": true, "highlightedText": "", "score": "94.73%"}, {"id": 80, "text": "```class MyButton(Button):\n    def on_release(self):  # or on_press\n        new_button = Button(text='hello')\n        self.root.ids.grid_1.add_widget(new_button)\n```", "isBot": true, "highlightedText": "", "score": "94.73%"}, {"id": 81, "text": "7. Question: Passing Argument to function python with a score of 94.69%", "isBot": true, "highlightedText": "", "score": "94.69%"}, {"id": 82, "text": "```b = Button(text=\"click me\", command=self.callback)\n# Or if you want to pass parameters\nb = Button(text=\"click me\", command=lambda: self.callback(\"1\"))\n```", "isBot": true, "highlightedText": "", "score": "94.69%"}, {"id": 83, "text": "8. Question: Sending a form request in Python with a score of 94.66%", "isBot": true, "highlightedText": "", "score": "94.66%"}, {"id": 84, "text": "```$(\"#button533e24e4d7c79\").trigger(\"click\"); // This will mimic the clicking of the button (programmatically) -- requires Jquery\n```", "isBot": true, "highlightedText": "", "score": "94.66%"}, {"id": 85, "text": "9. Question: How to get grid information from pressed Button in tkinter? with a score of 94.63%", "isBot": true, "highlightedText": "", "score": "94.63%"}, {"id": 86, "text": "```button = Button(..., command=lambda row=i, column=j: doSomething(row, column))\n```", "isBot": true, "highlightedText": "", "score": "94.63%"}, {"id": 87, "text": "10. Question: Using lambda expression to connect slots in pyqt with a score of 94.55%", "isBot": true, "highlightedText": "", "score": "94.55%"}, {"id": 88, "text": "```button.clicked.connect(lambda state, x=idx: self.button_pushed(x))\n```", "isBot": true, "highlightedText": "", "score": "94.55%"}, {"id": 89, "text": "I classified your question with the following intent: code_search And found these entities: database: query", "isBot": true}], "2023-05-08T15:49:58.797915": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "Convert view data to a dynamic object when submitting post result", "isBot": false, "highlightedText": ""}, {"id": 1, "text": "Convert view data to a dynamic object when submitting post result", "isBot": false, "highlightedText": "<span class=\"entity-undefined\">Convert<span class=\"label\">[undefined]</span></span> view <span class=\"entity-operation\">data to a<span class=\"label\">[operation]</span></span> <span class=\"entity-query\">dynamic object when<span class=\"label\">[query]</span></span> submitting <span class=\"entity-query\">post<span class=\"label\">[query]</span></span> result", "intent": "code_concept"}, {"id": 2, "text": "1. Question: Passing an array in Python to Django template with a score of 94.63%", "isBot": true, "highlightedText": "", "score": "94.63%", "isRemoved": true}, {"id": 3, "text": "```from django.shortcuts import render_to_response\nfrom django.core import serializers\n\ndef my_view(request) :\n    json_data = serializers.serialize('json', my_django_object)\n    render_to_response('my_template.html', {'json_data' : json_data})\n```", "isBot": true, "highlightedText": "", "score": "94.63%", "liked": false, "disliked": true, "feedback": "not in line with the topic", "isRemoved": true}, {"id": 4, "text": "2. Question: Django - Edit templates from django admin with a score of 94.16%", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 5, "text": "```from django.template import Context, Template\nfrom django.http import HttpResponse\n\ndef my_view(request):\n    ...\n    context = {'value': something, 'another_var': something_else}\n    # Here, instead of returning `render`, render the template using the context manually\n    template_content = DbTemplate.objects.get(name='my_template').content\n    template = Template(template_content)\n    return HttpResponse(template.render(Context(context)))\n```", "isBot": true, "highlightedText": "", "score": "94.16%", "liked": true, "disliked": false}, {"id": 6, "text": "3. Question: Django rest framework is returning 'u prefix to angular from the database with a score of 94.16%", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 7, "text": "```    from rest_framework.renderers import JSONRenderer\n\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        headers = self.get_success_headers(serializer.data)\n\n        return Response(JSONRenderer.render({'stylist': serializer.data}), status=status.HTTP_201_CREATED, headers=headers)\n```", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 8, "text": "4. Question: Django - being able to access page only after HttpResponseRedirect with a score of 94.07%", "isBot": true, "highlightedText": "", "score": "94.07%"}, {"id": 9, "text": "```# in the view where form is submitted\nif form.is_valid():\n    request.session['form-submitted'] = True\n    return HttpResponseRedirect(reverse('success'))\n\n# in the success view\ndef get(self, request):\n    if not request.session.get('form-submitted', False):\n        # handle case where form was not submitted\n    else:\n        # render the template\n```", "isBot": true, "highlightedText": "", "score": "94.07%"}, {"id": 10, "text": "5. Question: Passing JSON data to the front end using Django with a score of 94.05%", "isBot": true, "highlightedText": "", "score": "94.05%"}, {"id": 11, "text": "```from django.utils import simplejson\n\ndef my_ajax_view(request):\n    if not request.is_ajax():\n        raise Http404\n\n    data_dict = getmydata() #lets supose is a dict\n    return HttpResponse(simplejson.dumps(data_dict))\n```", "isBot": true, "highlightedText": "", "score": "94.05%"}, {"id": 12, "text": "6. Question: How to download a generator with Python Flask? with a score of 94.00%", "isBot": true, "highlightedText": "", "score": "94.00%"}, {"id": 13, "text": "```@app.route('/data', methods = ['GET', 'POST'])\ndef data():\n    form = Form()\n    if form.validate_on_submit():\n        # Complete request\n        # Generate data\n        # Generate temp filename and save the result in it\n        # Display (or redirect to) a page with a link to /get-result/{{ THE RESULT ID }}\n\n    return render_template('data.html', title = 'Data Page', form = form)\n\n@app.route('/get-result/<result_id>', methods = ['GET', 'POST'])\ndef output():\n    # Open the result file based on its id\n    # Stream it to the client as you did before\n```", "isBot": true, "highlightedText": "", "score": "94.00%"}, {"id": 14, "text": "7. Question: Django_tables2: Add an edit and delete button next to each row with a score of 93.92%", "isBot": true, "highlightedText": "", "score": "93.92%"}, {"id": 15, "text": "```return render_to_response(\"azuriranje/stavka.html\", {'form': form,}, context_instance=RequestContext(request))\n```", "isBot": true, "highlightedText": "", "score": "93.92%"}, {"id": 16, "text": "8. Question: Put a Rendered Django Template in Json along with some other items with a score of 93.92%", "isBot": true, "highlightedText": "", "score": "93.92%"}, {"id": 17, "text": "```from django.http import JsonResponse\nfrom django.template.loader import render_to_string\n\n\ndef view_name(request, params):\n    objects = Object.objects.all()\n    somevar = \"something\"\n    request_id = 123456\n\n    # Context to be passed on to template\n    context = {'objects':objects}\n\n    rendered_html = render_to_string('appname/template.html', context)\n\n    return JsonResponse({\n        \"somevar\": somevar,\n        \"html\": rendered_html,\n        \"request_id\": request_id\n    })\n```", "isBot": true, "highlightedText": "", "score": "93.92%"}, {"id": 18, "text": "9. Question: Django Single View to get response from multiple apps with a score of 93.89%", "isBot": true, "highlightedText": "", "score": "93.89%"}, {"id": 19, "text": "```def postview(request, *args, **kw):\n    post_type = guess_the_post_type_from(request)\n    view = get_the_view_for(post_type)\n    return view(request, *args, **kw)\n```", "isBot": true, "highlightedText": "", "score": "93.89%"}, {"id": 20, "text": "10. Question: Django form INSERTs when I want it to UPDATE with a score of 93.86%", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 21, "text": "```def view_function(request,id):\n    object_to_edit = get_object_or_404(Model,id=id) #Or slug=slug\n    form = ModelForm(data = request.POST or None, instance=object_to_edit)\n    if form.is_valid():\n        form.save()\n        redirect()\n    return render_to_response('template_name',{},RequestContext(request))\n```", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 22, "text": "I classified your question with the following intent: code_concept And found these entities: convert: operation, data to a: operation, dynamic object when: query, post: query", "isBot": true}, {"id": 23, "text": "Load a data table in a partial view using API to retrieve data", "isBot": false, "highlightedText": "Load a data table in a <span class=\"entity-response\">partial<span class=\"label\">[response]</span></span> <span class=\"entity-response\">view<span class=\"label\">[response]</span></span> using API to retrieve data", "intent": "code_example"}, {"id": 24, "text": "1. Question: django: django-tables2 DetailView CBV won't display single object with a score of 93.77%", "isBot": true, "highlightedText": "", "score": "93.77%"}, {"id": 25, "text": "```def get_table_data(self):\n    return [self.object]\n```", "isBot": true, "highlightedText": "", "score": "93.77%"}, {"id": 26, "text": "2. Question: How to make a server side data request via react.js with a score of 93.57%", "isBot": true, "highlightedText": "", "score": "93.57%"}, {"id": 27, "text": "```$.get('/get_dataset.json', function(dataset) {\n  React.renderComponent( <App data={dataset}/>, document.getElementById( \"App\" ) );\n});\n```", "isBot": true, "highlightedText": "", "score": "93.57%", "liked": true, "disliked": false}, {"id": 28, "text": "3. Question: How to use multiple models in one template in Django? with a score of 93.56%", "isBot": true, "highlightedText": "", "score": "93.56%"}, {"id": 29, "text": "```def get_context_data(self. **kwargs):\n    context = super(PageView, self).get_context_data(**kwargs)\n    context['more_model_objects'] = YourModel.objects.all()\n    return context\n```", "isBot": true, "highlightedText": "", "score": "93.56%"}, {"id": 30, "text": "4. Question: Django tastypie: Add new Array of objects Next to \"objects\" and \"meta\" in Api output with a score of 93.35%", "isBot": true, "highlightedText": "", "score": "93.35%"}, {"id": 31, "text": "```class PageDataAddition(object):\n    def alter_list_data_to_serialize(self, request, data):\n        data['page'] = {'your_data': True}\n        return data\n\nclass ItemResource(PageDataAddition, ModelResource):\n    ...\n```", "isBot": true, "highlightedText": "", "score": "93.35%"}, {"id": 32, "text": "5. Question: How can I leverage builtin pagination for a list_route in the Django Rest Framework? with a score of 93.31%", "isBot": true, "highlightedText": "", "score": "93.31%"}, {"id": 33, "text": "```@list_route(methods=['get'])\ndef some_method(self, request, **kwargs):\n    queryset = Model.objects.all()\n    page = self.paginate_queryset(queryset)\n    if page is not None:\n        serializer = self.get_serializer(page, many=True)\n        return self.get_paginated_response(serializer.data)\n    serializer = self.get_serializer(queryset, many=True)\n    return Response(serializer.data)\n```", "isBot": true, "highlightedText": "", "score": "93.31%"}, {"id": 34, "text": "6. Question: How can I replace the whole table's content with another table's content with a score of 93.24%", "isBot": true, "highlightedText": "", "score": "93.24%"}, {"id": 35, "text": "```   select = TableWithData.select()\n   insert = NewTable.insert_from(NewTable._meta.get_fields(), select)\n```", "isBot": true, "highlightedText": "", "score": "93.24%"}, {"id": 36, "text": "7. Question: django - pre-set request.DATA in a variable that won't change with a score of 93.20%", "isBot": true, "highlightedText": "", "score": "93.20%"}, {"id": 37, "text": "``` data_full = dict(request.DATA)\n```", "isBot": true, "highlightedText": "", "score": "93.20%"}, {"id": 38, "text": "8. Question: How to get all the data from the database and display in a table with a score of 93.17%", "isBot": true, "highlightedText": "", "score": "93.17%"}, {"id": 39, "text": "```class MyView(TemplateView):\n    model = Mymodel\n    template_name = \"home.html\"\n\n    def get_context_data(self, *args, **kwargs):\n        context = super(MyView, self).get_context_data(*args, **kwargs)\n        context['ngapp'] = \"Myapp\"\n        context['query_results'] = self.get_data()\n        return context\n\n    def get_data(self):\n        query_results = self.model.objects.all()\n        return query_results\n```", "isBot": true, "highlightedText": "", "score": "93.17%", "liked": true, "disliked": false}, {"id": 40, "text": "9. Question: How is the 'obj' parameter passed to Permission class function in Django Rest Framework? with a score of 93.11%", "isBot": true, "highlightedText": "", "score": "93.11%"}, {"id": 41, "text": "```class MyModelRetieveApiView(generics.RetrieveAPIView):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n    permission_classes = (IsAuthenticated,)\n    authentication_classes = (TokenAuthentication,)\n```", "isBot": true, "highlightedText": "", "score": "93.11%"}, {"id": 42, "text": "10. Question: Django class-based view: How do I pass additional parameters to the as_view method? with a score of 93.06%", "isBot": true, "highlightedText": "", "score": "93.06%"}, {"id": 43, "text": "```# myapp/views.py\nfrom django.views.generic import *\n\nclass MyView(DetailView):\n    template_name = 'detail.html'\n    model = MyModel\n    # additional parameters\n    slug = None\n\n    def get_object(self, queryset=None):\n        return queryset.get(slug=self.slug)\n```", "isBot": true, "highlightedText": "", "score": "93.06%"}, {"id": 44, "text": "I classified your question with the following intent: code_example And found these entities: partial: response, view: response", "isBot": true}, {"id": 45, "text": "Convert json to csv with dynamic (unknown) properties", "isBot": false, "highlightedText": "<span class=\"entity-undefined\">Convert<span class=\"label\">[undefined]</span></span> <span class=\"entity-data_structure\">json<span class=\"label\">[data_structure]</span></span> to <span class=\"entity-data_structure\">csv<span class=\"label\">[data_structure]</span></span> with <span class=\"entity-query\">dynamic<span class=\"label\">[query]</span></span> (<span class=\"entity-query\">unknown<span class=\"label\">[query]</span></span>) <span class=\"entity-query\">properties<span class=\"label\">[query]</span></span>", "intent": "code_concept"}, {"id": 46, "text": "1. Question: keep variable type in json.dump with a score of 95.25%", "isBot": true, "highlightedText": "", "score": "95.25%"}, {"id": 47, "text": "```#!/usr/bin/python\n\nimport csv\nimport json\n\ncsvfile = [\n    '\"name\",\"age\",\"grade\"',\n    '\"ann\",42,1.3',\n    '\"hans\",23,1.7'\n]\nrow_types = {'name': str, 'grade': float, 'age': int}\n\nreader = csv.DictReader(csvfile)\n\njsonfile = open('test.json', 'w')\nfor row in reader:\n    print('reader produces strings only:')\n    print(row)\n    print('convert to known types')\n    row_converted = {k: row_types[k](v) for k, v in row.items()}\n    print(row_converted)\n    json.dump(row_converted, jsonfile)\n    jsonfile.write('\\n')\n```", "isBot": true, "highlightedText": "", "score": "95.25%"}, {"id": 48, "text": "2. Question: How to create sqlalchemy to json with a score of 95.24%", "isBot": true, "highlightedText": "", "score": "95.24%"}, {"id": 49, "text": "```from json import dumps\nfrom sqlalchemy.orm import class_mapper\n\ndef serialize(model):\n  \"\"\"Transforms a model into a dictionary which can be dumped to JSON.\"\"\"\n  # first we get the names of all the columns on your model\n  columns = [c.key for c in class_mapper(model.__class__).columns]\n  # then we return their values in a dict\n  return dict((c, getattr(model, c)) for c in columns)\n\n# we can then use this for your particular example\nserialized_labels = [\n  serialize(label)\n  for label in session.query(LabelsData).filter(LabelsData.deleted == False)\n]\nyour_json = dumps(serialized_labels)\n```", "isBot": true, "highlightedText": "", "score": "95.24%"}, {"id": 50, "text": "3. Question: Python CSV to JSON with a score of 95.16%", "isBot": true, "highlightedText": "", "score": "95.16%"}, {"id": 51, "text": "```import csv\nimport json\n\ncsvfile = open('file.csv', 'r')\njsonfile = open('file.json', 'w')\n\nfieldnames = (\"FirstName\",\"LastName\",\"IDNumber\",\"Message\")\nreader = csv.DictReader( csvfile, fieldnames)\nfor row in reader:\n    json.dump(row, jsonfile)\n    jsonfile.write('\\n')\n```", "isBot": true, "highlightedText": "", "score": "95.16%", "liked": true, "disliked": false}, {"id": 52, "text": "4. Question: formatting .csv to json in python for individual key:value pairs with a score of 95.15%", "isBot": true, "highlightedText": "", "score": "95.15%"}, {"id": 53, "text": "```import csv\nimport json\n\ncsvfile = open('spreadsheet.csv', 'r')\njsonfile = open('fileTo.json', 'w') \n\nfieldnames = (\"Id\",\"name\",\"TypeId\",\"Type\", \"listHere\")\nfieldfixers = {\n    'Id': int,\n    'Type': int,\n}\nreader = csv.DictReader( csvfile, fieldnames)\n\nfor row in reader:\n    for key,value in row.iteritems():\n        ffunc = fieldfixers.get(key)\n        if ffunc:\n            row[key] = ffunc(value)\n    json.dump(row, jsonfile, sort_keys=True, indent=4, separators=(',', ':'))\n    jsonfile.write(',')\n    jsonfile.write('\\n') \n```", "isBot": true, "highlightedText": "", "score": "95.15%", "liked": true, "disliked": false}, {"id": 54, "text": "5. Question: How can I quickly dump a query result set into JSON? with a score of 95.09%", "isBot": true, "highlightedText": "", "score": "95.09%"}, {"id": 55, "text": "```from django.core import serializers\ndata = serializers.serialize('json', SomeModel.objects.all())\n\n# it's pretty useful and quick.\ndata = serializers.serialize('json', SomeModel.objects.all(), fields=('foo','bar'))\n```", "isBot": true, "highlightedText": "", "score": "95.09%"}, {"id": 56, "text": "6. Question: Parse This Custom Twitter Capture Data With Python and Create Statistics with a score of 95.06%", "isBot": true, "highlightedText": "", "score": "95.06%"}, {"id": 57, "text": "```import json\nimport csv\nf = file('test.json', 'r')\ndata = json.load(f)\n#result = []\nfor k,v in data.iteritems():\n    print k,v\n    #result.append(v)\nf = file('output.csv', 'w')\nwriter = csv.writer(f)\nwriter.writerows(result)\n```", "isBot": true, "highlightedText": "", "score": "95.06%"}, {"id": 58, "text": "7. Question: How to read data out of a SQLite database, into a dictionary before encoding it in JSON? with a score of 95.01%", "isBot": true, "highlightedText": "", "score": "95.01%"}, {"id": 59, "text": "```cur.execute('select * from Updates')\n\n# extract column names\ncolumn_names = [d[0] for d in cur.description]\n\nfor row in cur:\n  # build dict\n  info = dict(zip(column_names, row))\n\n  # dump it to a json string\n  reply = json.dumps(info)\n```", "isBot": true, "highlightedText": "", "score": "95.01%"}, {"id": 60, "text": "8. Question: beginner: django serializers.serialize with a score of 94.99%", "isBot": true, "highlightedText": "", "score": "94.99%"}, {"id": 61, "text": "```serializers.serialize('json', Temp.objects.all()[0])\n```", "isBot": true, "highlightedText": "", "score": "94.99%"}, {"id": 62, "text": "9. Question: How do I write a YAML file using a dictionary with long keys and values? with a score of 94.92%", "isBot": true, "highlightedText": "", "score": "94.92%"}, {"id": 63, "text": "```yaml.dump(d,  width=20, default_flow_style=False)\n```", "isBot": true, "highlightedText": "", "score": "94.92%"}, {"id": 64, "text": "10. Question: Python NaN JSON encoder with a score of 94.84%", "isBot": true, "highlightedText": "", "score": "94.84%"}, {"id": 65, "text": "```import simplejson\n\n\n>>> simplejson.dumps(d, ignore_nan=True)\nOut[3]: '{\"a\": 1, \"c\": 3, \"b\": 2, \"e\": null, \"f\": [1, null, 3]}'\n```", "isBot": true, "highlightedText": "", "score": "94.84%"}, {"id": 66, "text": "I classified your question with the following intent: code_concept And found these entities: convert: operation, json: data_structure, csv: data_structure, dynamic: query, unknown: query, properties: query", "isBot": true}], "2023-05-09T14:09:34.633574": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "Serialize and deserialize a Python dataclass to and from JSON", "isBot": false, "highlightedText": "<span class=\"entity-operation\">Serialize<span class=\"label\">[operation]</span></span> and <span class=\"entity-operation\">deserialize<span class=\"label\">[operation]</span></span> a <span class=\"entity-proglanguage\">Python dataclass to<span class=\"label\">[proglanguage]</span></span> and <span class=\"entity-query\">from<span class=\"label\">[query]</span></span> <span class=\"entity-undefined\">JSON<span class=\"label\">[undefined]</span></span>", "intent": "code_search"}, {"id": 1, "text": "1. Question: Correct way use type hints / generics to describe arguments of type class (\"type\") with a score of 94.60%", "isBot": true, "highlightedText": "", "score": "94.60%"}, {"id": 2, "text": "```T = TypeVar('T', bound=BaseModel)\n\ndef deserialize(data: Dict[str, Any], clazz: Callable[..., T]) -> T:\n    \"\"\" Deserialize dictionary into a model object of type clazz. \"\"\"\n```", "isBot": true, "highlightedText": "", "score": "94.60%"}, {"id": 3, "text": "2. Question: How do you serialize a model instance in Django? with a score of 94.51%", "isBot": true, "highlightedText": "", "score": "94.51%"}, {"id": 4, "text": "```from django.core import serializers\n\n# assuming obj is a model instance\nserialized_obj = serializers.serialize('json', [ obj, ])\n```", "isBot": true, "highlightedText": "", "score": "94.51%"}, {"id": 5, "text": "3. Question: Create an object from a JSON file in python (using a classmethod)? with a score of 93.96%", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 6, "text": "```import json\n\nclass Jsonable(object):\n    @classmethod\n    def from_json(cls, json_string):\n        attributes = json.loads(json_string)\n        if not isinstance(attributes, dict) or attributes.pop('__class') != cls.__name__:\n            raise ValueError\n        return cls(**attributes)\n```", "isBot": true, "highlightedText": "", "score": "93.96%"}, {"id": 7, "text": "4. Question: Python Serialization (to JSON) issue with a score of 93.83%", "isBot": true, "highlightedText": "", "score": "93.83%"}, {"id": 8, "text": "```json_serializer.serialize(queryset, ensure_ascii=False, stream=response)\n```", "isBot": true, "highlightedText": "", "score": "93.83%"}, {"id": 9, "text": "5. Question: SQL Alchemy ORM Getter with a score of 93.83%", "isBot": true, "highlightedText": "", "score": "93.83%"}, {"id": 10, "text": "```class JsonType(types.TypeDecorator):\n    impl = types.Unicode\n\n    def process_bind_param(self, value, dialect):\n        return json.dumps(value)\n\n    def process_result_value(self, value, dialect):\n        return json.loads(value)\n```", "isBot": true, "highlightedText": "", "score": "93.83%", "liked": true, "disliked": false}, {"id": 11, "text": "6. Question: How to generated xml file in Django with a score of 93.61%", "isBot": true, "highlightedText": "", "score": "93.61%", "isRemoved": true}, {"id": 12, "text": "```from django.core import serializers\ndata = serializers.serialize(\"xml\", SomeModel.objects.all())\n```", "isBot": true, "highlightedText": "", "score": "93.61%", "liked": false, "disliked": true, "feedback": "", "isRemoved": true}, {"id": 13, "text": "7. Question: Creating xml file in django with a score of 93.61%", "isBot": true, "highlightedText": "", "score": "93.61%"}, {"id": 14, "text": "```from django.core import serializers\ndata = serializers.serialize(\"xml\", SomeModel.objects.all())\n```", "isBot": true, "highlightedText": "", "score": "93.61%"}, {"id": 15, "text": "8. Question: Python web service for a java application? with a score of 93.57%", "isBot": true, "highlightedText": "", "score": "93.57%"}, {"id": 16, "text": "```public Map<String, Object> JsonToMap(String data) {\n        Map<String, Object> dataMap;\n        dataMap = new JSONDeserializer<Map>().deserialize(data);\n        return dataMap;\n    }\n```", "isBot": true, "highlightedText": "", "score": "93.57%"}, {"id": 17, "text": "9. Question: How to properly get a serializer instance in Django view? with a score of 93.36%", "isBot": true, "highlightedText": "", "score": "93.36%"}, {"id": 18, "text": "```serializer = self.get_serializer(data=request.data)\n```", "isBot": true, "highlightedText": "", "score": "93.36%"}, {"id": 19, "text": "10. Question: Where to start with parsing JSON? with a score of 93.33%", "isBot": true, "highlightedText": "", "score": "93.33%"}, {"id": 20, "text": "```import json\ndata = json.loads(...)\n```", "isBot": true, "highlightedText": "", "score": "93.33%"}, {"id": 21, "text": "I classified your question with the following intent: code_search And found these entities: Serialize: operation, deserialize: operation, Python dataclass to: proglanguage, from: query, json: data_structure", "isBot": true}, {"id": 22, "text": "How can I add Auth0 authentication to a dotnet endpoint?", "isBot": false, "highlightedText": "How can I <span class=\"entity-operation\">add Auth0 authentication to a<span class=\"label\">[operation]</span></span> <span class=\"entity-response\">dotnet<span class=\"label\">[response]</span></span> <span class=\"entity-data_structure\">endpoint<span class=\"label\">[data_structure]</span></span>?", "intent": "code_example"}, {"id": 23, "text": "1. Question: how to set up Drive SDK so you dont need a success token each time you run .py with a score of 94.29%", "isBot": true, "highlightedText": "", "score": "94.29%"}, {"id": 24, "text": "```import httplib2\nfrom oauth2client.client import OAuth2Credentials\n\nhttp = httplib2.Http()\ncredentials = OAuth2Credentials(access_token, client_id, client_secret, refresh_token, None, '', '')\ncredentials.authorize(http)\n```", "isBot": true, "highlightedText": "", "score": "94.29%", "liked": true, "disliked": false}, {"id": 25, "text": "2. Question: Using jcifs in jython in order to access site using NTLM security with a score of 94.19%", "isBot": true, "highlightedText": "", "score": "94.19%"}, {"id": 26, "text": "```ai = NTLMAuthenticationInfo(\"domain\", \"your host\", \"user\", \"password\")\nresult = request101.GET('/')\nresult = NTLMAuthentication(result, request101, ai)\n```", "isBot": true, "highlightedText": "", "score": "94.19%"}, {"id": 27, "text": "3. Question: Testing in Django Rest Framework, reproduce this curl request? with a score of 94.02%", "isBot": true, "highlightedText": "", "score": "94.02%"}, {"id": 28, "text": "```response = self.client.post('/api/token/',\n       {'grant_type': 'password', 'username': username, 'password': password})\n```", "isBot": true, "highlightedText": "", "score": "94.02%"}, {"id": 29, "text": "4. Question: OneDrive API Python SDK - points to login.live.com not mydomain.sharepoint.com with a score of 93.86%", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 30, "text": "```AUTH_SERVER_URL = \"https://login.microsoftonline.com/common/oauth2/authorize\"\nAUTH_TOKEN_URL = \"https://login.microsoftonline.com/common/oauth2/token\"\n```", "isBot": true, "highlightedText": "", "score": "93.86%"}, {"id": 31, "text": "5. Question: What's the proper way to test token-based auth using APIRequestFactory? with a score of 93.85%", "isBot": true, "highlightedText": "", "score": "93.85%"}, {"id": 32, "text": "```request = self.factory.get('/my_endpoint', HTTP_AUTHORIZATION='Token {}'.format(self.token))\nforce_authenticate(request, user=self.user)\n```", "isBot": true, "highlightedText": "", "score": "93.85%"}, {"id": 33, "text": "6. Question: python soap suds authenticate to affiliatewindow with a score of 93.84%", "isBot": true, "highlightedText": "", "score": "93.84%"}, {"id": 34, "text": "```auth = client.factory.create('UserAuthentication')\nauth.sApiKey = [api-key]\nclient.set_options(soapheaders=auth)\n```", "isBot": true, "highlightedText": "", "score": "93.84%"}, {"id": 35, "text": "7. Question: How to register user via google oauth2 using python-social-auth on single page webapp? with a score of 93.81%", "isBot": true, "highlightedText": "", "score": "93.81%"}, {"id": 36, "text": "```POST /o/oauth2/token HTTP/1.1\nHost: accounts.google.com\nContent-Type: application/x-www-form-urlencoded\n\ncode=4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&\nclient_id=8819981768.apps.googleusercontent.com&\nclient_secret={client_secret}&\nredirect_uri={your_redirect_uri}&\ngrant_type=authorization_code\n```", "isBot": true, "highlightedText": "", "score": "93.81%"}, {"id": 37, "text": "8. Question: Authorization headaches for Freebase API (Python) with a score of 93.79%", "isBot": true, "highlightedText": "", "score": "93.79%"}, {"id": 38, "text": "```# Sample code that connects to Google Drive\n\nfrom apiclient.discovery import build\nimport httplib2\nfrom oauth2client.client import SignedJwtAssertionCredentials, VerifyJwtTokenError\n\n\nSERVICE_EMAIL = \"you@gmail.com\"\nPRIVATE_KEY_PATH =\"./private_key.p12\"\n\n# Load private key\nkey = open(PRIVATE_KEY_PATH, 'rb').read()\n\n# Build the credentials object\ncredentials = SignedJwtAssertionCredentials(SERVICE_EMAIL, key, scope='https://www.googleapis.com/auth/drive')\n\ntry:\n  http = httplib2.Http()\n  http = credentials.authorize(http)\nexcept VerifyJwtTokenError as e:\n  print(u\"Unable to authorize using our private key: VerifyJwtTokenError, {0}\".format(e))\n  raise\n\nconnection = build('drive', 'v2', http=http)\n\n# You can now use connection to call anything you need for freebase - see their API docs for more info. \n```", "isBot": true, "highlightedText": "", "score": "93.79%"}, {"id": 39, "text": "9. Question: Need to get OAuth 'flow' flowing for Google Drive on Python for a stand alone py app with a score of 93.71%", "isBot": true, "highlightedText": "", "score": "93.71%"}, {"id": 40, "text": "```......\nif  credentials is None:\n    #step 1\n    auth_uri = flow.step1_get_authorize_url() # Redirect the user to auth_uri\n    print 'Go to the following link in your browser: ' + auth_uri\n    code = raw_input('Enter verification code: ').strip()\n    #step 2\n    credentials = flow.step2_exchange(code)\nelse:\n    print 'GDrive credentials are still current'\n\n#authorise\nhttp = httplib2.Http()\nhttp = credentials.authorize(http)\nprint 'Authorisation successfully completed'\n......etc\n```", "isBot": true, "highlightedText": "", "score": "93.71%"}, {"id": 41, "text": "10. Question: How to get a JSON response from a POST form using Django with a score of 93.71%", "isBot": true, "highlightedText": "", "score": "93.71%"}, {"id": 42, "text": "```import requests\nr = requests.post(\"https://helios.zportal.nl/api/v2/oauth/token\", data={'grant_type': 'authorization_code', 'code': *Authorization Code*})\n```", "isBot": true, "highlightedText": "", "score": "93.71%"}, {"id": 43, "text": "I classified your question with the following intent: code_example And found these entities: add Auth0 authentication to a: operation, dotnet: response, endpoint: data_structure", "isBot": true}, {"id": 44, "text": "In SQL, how can I query the results of a table join subquery?", "isBot": false, "highlightedText": "In <span class=\"entity-undefined\">SQL<span class=\"label\">[undefined]</span></span>, how can I query the results of a <span class=\"entity-response\">table<span class=\"label\">[response]</span></span> join subquery?", "intent": "code_concept"}, {"id": 45, "text": "1. Question: Mysql IN clause parameterization in PHP, Python with a score of 95.04%", "isBot": true, "highlightedText": "", "score": "95.04%"}, {"id": 46, "text": "```$placeholders = str_repeat('?, ', count($array)-1) . '?';\n$stmt = $pdo->prepare(\"SELECT * FROM table WHERE field IN ($placeholders)\");\n$stmt->execute($array);\n```", "isBot": true, "highlightedText": "", "score": "95.04%"}, {"id": 47, "text": "2. Question: Selecting specific columns with generative selects with a score of 94.85%", "isBot": true, "highlightedText": "", "score": "94.85%"}, {"id": 48, "text": "```from sqlalchemy.sql import select, and_, or_, not_\n# ...\nquery = select(# what to select (tables or columns)\n               [table.c.column1, table.c.column2],\n               # filters (use any expression using and_, or_, not_...\n               and_(table.c.column1.like(\"j%\")),\n               )\nresult = query.execute()\n```", "isBot": true, "highlightedText": "", "score": "94.85%"}, {"id": 49, "text": "3. Question: How do you create an index on the tables themselves in a database? with a score of 94.72%", "isBot": true, "highlightedText": "", "score": "94.72%"}, {"id": 50, "text": "```cursor.execute(\n    \"SELECT tbl_name FROM sqlite_master WHERE type='table'\")\n\ntable_names = cursor.fetchall()\n```", "isBot": true, "highlightedText": "", "score": "94.72%"}, {"id": 51, "text": "4. Question: How to intersect two raw SQL queries using SQLAlchemy? with a score of 94.70%", "isBot": true, "highlightedText": "", "score": "94.70%"}, {"id": 52, "text": "```from sqlalchemy import create_engine, text\nengine = create_engine('postgresql://user:password@localhost/somedb')\nq1 = \"SELECT name FROM table_a intersect SELECT name FROM table_b\"\nq1res = engine.execute(text(q1)).fetchall()\n# or\nq2res = engine.execute(text(q1)).fetchone()\n```", "isBot": true, "highlightedText": "", "score": "94.70%"}, {"id": 53, "text": "5. Question: Python SQLite3 How to extract specific tables only with a score of 94.62%", "isBot": true, "highlightedText": "", "score": "94.62%"}, {"id": 54, "text": "```for tablename in cur.execute('SELECT name FROM sqlite_master WHERE type=\"table\";'):\n    if tablename[0].startswith('conn_'):\n        execute_some_query_using_this_table()\n```", "isBot": true, "highlightedText": "", "score": "94.62%"}, {"id": 55, "text": "6. Question: Right way of creating SQL query on pandas with a score of 94.53%", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 56, "text": "```sql.execute(sql, con, cur=None, params=None, flavor='sqlite')\nExecute the given SQL query using the provided connection object.\n...\nparams : list or tuple, optional\n    List of parameters to pass to execute method.\n```", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 57, "text": "7. Question: python - putting list items in a queue with a score of 94.50%", "isBot": true, "highlightedText": "", "score": "94.50%"}, {"id": 58, "text": "```list = [self.queryQ.put(query) for query in queries]\n```", "isBot": true, "highlightedText": "", "score": "94.50%"}, {"id": 59, "text": "8. Question: Design pattern for generating SQL string with a score of 94.38%", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 60, "text": "```def QueryWhere(table,where={}):\n    params = [\"%s=?\"%key for key in where.keys()] #take advantage of builtin query placeholders (?)\n    c = db.cursor()\n    c.execute(\"SELECT * FROM %s WHERE %s\"%(table,\" AND \".join(params)),where.values())\n    return c.fetchall()\n\nprint QueryWhere(\"users\",{\"name\":\"johndoe\",\"pass\":\"1c4$g\"}) \n```", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 61, "text": "9. Question: select from sqlite table where rowid in list using python sqlite3 \u2014 DB-API 2.0 with a score of 94.38%", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 62, "text": "```args=[2,3]\nsql=\"select * from sqlitetable where rowid in ({seq})\".format(\n    seq=','.join(['?']*len(args)))\n\ncursor.execute(sql, args)\n```", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 63, "text": "10. Question: How do I use prepared statements for \"select from xxx where xxx\" using python with a score of 94.38%", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 64, "text": "```sql = 'select * from tablename where ' + ' and '.join(k + ' = %s' for k in data)\ncursor.execute(sql, tuple(data.values()))\n```", "isBot": true, "highlightedText": "", "score": "94.38%"}, {"id": 65, "text": "I classified your question with the following intent: code_concept And found these entities: sql: proglanguage, table: response", "isBot": true}], "2023-05-10T11:49:53.682661": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "How can i mark all entries in a numerical column whose values are in the top 75%?", "isBot": false, "highlightedText": "How can i mark <span class=\"entity-rating\">all entries<span class=\"label\">[rating]</span></span> in a <span class=\"entity-query\">numerical<span class=\"label\">[query]</span></span> column whose values are in the top <span class=\"entity-query\">75<span class=\"label\">[query]</span></span>%?", "intent": "code_search"}, {"id": 1, "text": "1. Question: Finding the columns which are unique to a row in a datafame in python with a score of 94.19%", "isBot": true, "highlightedText": "", "score": "94.19%"}, {"id": 2, "text": "```In [19]:\ndf.columns[df.sum(axis=0) == 1]\n\nOut[19]:\nInt64Index([5, 6, 7, 8], dtype='int64')\n```", "isBot": true, "highlightedText": "", "score": "94.19%"}, {"id": 3, "text": "2. Question: Extract values in Pandas value_counts() with a score of 94.09%", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 4, "text": "```dataframe[column].value_counts().index.tolist()\n['apple', 'sausage', 'banana', 'cheese']\n```", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 5, "text": "3. Question: How to sum values of one column and group them by another column with a score of 94.06%", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 6, "text": "```In [11]: df.groupby(\"type\").sum()\nOut[11]:\n      qty\ntype\nA       6\nB       9\n```", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 7, "text": "4. Question: How to ensure get label for zero counts in python pandas pd.cut with a score of 93.93%", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 8, "text": "```In [11]: pd.value_counts(out).reindex(out.levels, fill_value=0)\nOut[11]: \n(0, 10]     3\n(10, 20]    1\n(20, 30]    0\ndtype: int64\n```", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 9, "text": "5. Question: calculate 95 percentile of the list values in python with a score of 93.78%", "isBot": true, "highlightedText": "", "score": "93.78%"}, {"id": 10, "text": "```import numpy as np\nfor i in finalvalues.values():\n    print np.percentile(map(int,i),95)\n```", "isBot": true, "highlightedText": "", "score": "93.78%"}, {"id": 11, "text": "6. Question: Indexing Row Values Based on Value of Each Column with a score of 93.75%", "isBot": true, "highlightedText": "", "score": "93.75%"}, {"id": 12, "text": "```>>> df / (df.iloc[0] / 100)\n   ColA ColB ColC\n0   100  100  100\n1   200  150  300\n```", "isBot": true, "highlightedText": "", "score": "93.75%"}, {"id": 13, "text": "7. Question: Calculate Numeric Value inside a String within a Pandas Column with a score of 93.73%", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 14, "text": "```vals = column_x.apply(lambda x: float(x.split('=')[1]))\nprint sum(vals <= 0.05) #number of rows with AF1000g=0.05 and less\nprint sum(vals >= 0.06) #number of rows with AF1000g=0.06 and greater\n```", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 15, "text": "8. Question: Split a Pandas Dataframe into multiple smaller dataframes based on empty rows with a score of 93.70%", "isBot": true, "highlightedText": "", "score": "93.70%"}, {"id": 16, "text": "```df['counter'] = (df['Header1'] == \"''\").cumsum()\ndf = df[df['Header1'] != \"''\"]  # remove empty rows\ndf.groupby('counter').apply(lambda df: df.iloc[0])\n```", "isBot": true, "highlightedText": "", "score": "93.70%"}, {"id": 17, "text": "9. Question: Plotting multiindex pandas DataFrame with matplotlib with a score of 93.60%", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 18, "text": "```for idx, val in enumerate(df.count):\n    print val\n\n    # Get the index of this row\n    d = df.iloc[idx].name\n```", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 19, "text": "10. Question: Using Python's max to return two equally large values with a score of 93.60%", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 20, "text": "```count = { 'a': 120, 'b': 120, 'c': 100 }\n\nhighest = max(count.values())\n\nprint [k for k,v in count.items() if v == highest]\n```", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 21, "text": "I classified your question with the following intent: code_search And found these entities: 75: query, all entries: rating, numerical: query", "isBot": true}, {"id": 22, "text": "How can I append new rows to a dataframe based on streaming data?", "isBot": false, "highlightedText": "How can I append <span class=\"entity-response\">new<span class=\"label\">[response]</span></span> rows to a <span class=\"entity-data_structure\">dataframe<span class=\"label\">[data_structure]</span></span> based on streaming data?", "intent": "code_search"}, {"id": 23, "text": "1. Question: how to convert a list of list of dictionaries into a single panda dataframe? with a score of 94.84%", "isBot": true, "highlightedText": "", "score": "94.84%"}, {"id": 24, "text": "```frames=[]\nfor row in self.rowResults:\n    frames.append(pandas.DataFrame(row))\nself.results = pandas.concat(frames)\n```", "isBot": true, "highlightedText": "", "score": "94.84%"}, {"id": 25, "text": "2. Question: pandas not saving content of table into csv with a score of 94.54%", "isBot": true, "highlightedText": "", "score": "94.54%"}, {"id": 26, "text": "```def create_data(self):\n    mydf = pd.DataFrame(columns=<some header>)\n    data = []\n    for i in xrange(0, 10):\n        data = something\n        mydf = mydf.append(data)\n    return mydf \n```", "isBot": true, "highlightedText": "", "score": "94.54%"}, {"id": 27, "text": "3. Question: Write data if it matches a criterion with a score of 94.31%", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 28, "text": "```df_datafile = pd.read_csv('data.csv')\nfor row, data in df_datafile.iterrows():\n    data.dropna().to_frame().transpose().to_csv('file_{}.csv'.format(row))\n```", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 29, "text": "4. Question: Creating a zero-filled pandas data frame with a score of 94.31%", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 30, "text": "```d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)\n```", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 31, "text": "5. Question: Python pandas creating data frame with variable number of inputs with a score of 94.21%", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 32, "text": "```def variableDataFrame(*args):\n    \"\"\"I'm assuming the last argument is the data argument.\n    Everything else gets put into an index.\n    If you want these as columns instead of rows,\n    put a \".T\" at the end of the return argument.\"\"\"\n\n    return pd.DataFrame(args[-1], index=pd.MultiIndex.from_arrays(args[:-1]))\n\n    # Optional return if you want columns instead\n    # return pd.DataFrame(args[-1], index=pd.MultiIndex.from_arrays(args[:-1])).T\n```", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 33, "text": "6. Question: How to efficiently unfold a date range span in Pandas? with a score of 94.15%", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 34, "text": "```import pandas as pd\ndef full_data(dataframe):\n    allframes = []\n    for i in dataframe.index:\n        newframe = pd.DataFrame()\n        newframe['dates'] = pd.date_range(dataframe.iloc[i].start, dataframe.iloc[i].end, freq = 'D')\n        newframe['name'] = dataframe.iloc[i]['name']\n        newframe['address'] = dataframe.iloc[i]['address']            \n        allframes.append(newframe)\n    return concat(allframes)\n```", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 35, "text": "7. Question: Extracting data from two dataframes to create a third with a score of 94.11%", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 36, "text": "```>>> pd.DataFrame(\n    df1.as_matrix() * df3.as_matrix() + df1.as_matrix() * (1 - df3.as_matrix()),\n    index=df1.index,\n    columns=df1.columns)\n```", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 37, "text": "8. Question: Creating a panda DataFrame from dictionary with multiple keys and value (list) of different lengths with a score of 94.07%", "isBot": true, "highlightedText": "", "score": "94.07%"}, {"id": 38, "text": "```import pandas as pd \ndataframe1 = pd.DataFrame(dict([(k,pd.Series(v)) for k,v in my_dict.iteritems()]))  \n```", "isBot": true, "highlightedText": "", "score": "94.07%"}, {"id": 39, "text": "9. Question: pandas.DataFrame.from_dict not preserving order using OrderedDict with a score of 94.06%", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 40, "text": "```# ... all your data collection\ndf = pd.DataFrame(data, columns=data.keys())\n```", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 41, "text": "10. Question: Combine a list of pandas dataframes to one pandas dataframe with a score of 93.95%", "isBot": true, "highlightedText": "", "score": "93.95%"}, {"id": 42, "text": "```import pandas as pd\ndf = pd.concat(list_of_dataframes)\n```", "isBot": true, "highlightedText": "", "score": "93.95%"}, {"id": 43, "text": "I classified your question with the following intent: code_search And found these entities: new: response, dataframe: data_structure", "isBot": true}, {"id": 44, "text": "How can I read csv files with custom header?", "isBot": false, "highlightedText": "How can I <span class=\"entity-operation\">read<span class=\"label\">[operation]</span></span> <span class=\"entity-data_structure\">csv files<span class=\"label\">[data_structure]</span></span> with <span class=\"entity-response\">custom<span class=\"label\">[response]</span></span> header?", "intent": "code_concept"}, {"id": 45, "text": "1. Question: Processing one row of a csv file with a score of 96.63%", "isBot": true, "highlightedText": "", "score": "96.63%"}, {"id": 46, "text": "```with open('your_file.csv') as f:\n    reader = csv.reader(f)\n    header = next(reader)\n```", "isBot": true, "highlightedText": "", "score": "96.63%"}, {"id": 47, "text": "2. Question: How to include headers into a csv file with a score of 96.58%", "isBot": true, "highlightedText": "", "score": "96.58%"}, {"id": 48, "text": "```import csv\nmyHeaders = [\"Header1\", \"Header2\"]\ncsvData = []\nwith open( 'myfile.csv','r+b' ) as csvfile:\n    # Read the data\n    reader = csv.reader(csvfile, quoting=csv.QUOTE_NONE)\n    writer = csv.writer(csvfile)\n    writer.writerow(myHeaders)\n    writer.writerows([row for row in reader])\n```", "isBot": true, "highlightedText": "", "score": "96.58%"}, {"id": 49, "text": "3. Question: Is there a more efficient way to load 10,000 excel rows into python? with a score of 96.25%", "isBot": true, "highlightedText": "", "score": "96.25%"}, {"id": 50, "text": "```from csv import reader as csv_reader\n\nwith open(\"data.csv\", \"r\") as fd:\n    for row in csv_reader(fd):\n        userid, firstname, lastname = row\n```", "isBot": true, "highlightedText": "", "score": "96.25%"}, {"id": 51, "text": "4. Question: Ruby or Python for heavy import script? with a score of 96.19%", "isBot": true, "highlightedText": "", "score": "96.19%"}, {"id": 52, "text": "```import csv\nwith open('csvfile.csv', 'rb') as source:\n    rdr= csv.reader( source )\n    for row in rdr:\n        # do whatever with row\n```", "isBot": true, "highlightedText": "", "score": "96.19%"}, {"id": 53, "text": "5. Question: python reading specific lines from CSV using list comprehension with a score of 96.04%", "isBot": true, "highlightedText": "", "score": "96.04%"}, {"id": 54, "text": "```import csv\nwith open(\"your/file.csv\", ...) as source:\n    reader = csv.reader(source, delimiter='\\t')\n    selection = [row for row in reader if row[2] == 'a']\n```", "isBot": true, "highlightedText": "", "score": "96.04%"}, {"id": 55, "text": "6. Question: Search a csv for a string and save that column with a score of 96.03%", "isBot": true, "highlightedText": "", "score": "96.03%"}, {"id": 56, "text": "```import csv\ncolumns = []                        #save the columns in this list\nwith open('myfile.csv','r') as f:\n reader = csv.reader(f, delimiter='\\t')\n ind = next(reader).index('Default')   #find the index of 'Default' in the header\n for row in reader:\n     columns.append(row[ind])\n```", "isBot": true, "highlightedText": "", "score": "96.03%"}, {"id": 57, "text": "7. Question: What is the easiest way to read the text file delimited by tab in python? with a score of 95.99%", "isBot": true, "highlightedText": "", "score": "95.99%"}, {"id": 58, "text": "```import csv\nwith open ('data.txt', 'r') as f:\n    first_column = [row[0] for row in csv.reader(f,delimiter='\\t')]\n    print (first_column[1:])\n```", "isBot": true, "highlightedText": "", "score": "95.99%"}, {"id": 59, "text": "8. Question: create table using python objects with a score of 95.97%", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 60, "text": "```import csv\nfile_ptr = open('filename.csv','r');\nfields = range(0, total number of columns in file header)\nfile_data = csv.DictReader(file_ptr, fields, delimiter=',')\nfor data in file_data:\n   print data\n   # data will be in dict format and first line would be all your headers,else are column data\n   # here, database query and code processing \n```", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 61, "text": "9. Question: Python Pandas read_csv reads only single line from CSV file with a score of 95.97%", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 62, "text": "```csv_f = pd.read_csv('test.csv', header=None) \nprint csv_f\n```", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 63, "text": "10. Question: Reading specific Column Values from CSV and pass it to urllib as parameter in Python with a score of 95.97%", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 64, "text": "```import csv\nwith open('test.csv','r') as csvFile:\n    reader=csv.reader(csvFile,delimiter=',')\n    reader.next()   # if you don't want to print columns headers\n    for row in reader:\n         print row[2]\ncsvFile.close()\n```", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 65, "text": "I classified your question with the following intent: code_concept And found these entities: read: operation, csv files: data_structure, custom: response", "isBot": true}], "2023-05-10T11:50:01.646565": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "How can i mark all entries in a numerical column whose values are in the top 75%?", "isBot": false, "highlightedText": "How can i mark <span class=\"entity-rating\">all entries<span class=\"label\">[rating]</span></span> in a <span class=\"entity-query\">numerical<span class=\"label\">[query]</span></span> column whose values are in the top <span class=\"entity-query\">75<span class=\"label\">[query]</span></span>%?", "intent": "code_search"}, {"id": 1, "text": "1. Question: Finding the columns which are unique to a row in a datafame in python with a score of 94.19%", "isBot": true, "highlightedText": "", "score": "94.19%"}, {"id": 2, "text": "```In [19]:\ndf.columns[df.sum(axis=0) == 1]\n\nOut[19]:\nInt64Index([5, 6, 7, 8], dtype='int64')\n```", "isBot": true, "highlightedText": "", "score": "94.19%"}, {"id": 3, "text": "2. Question: Extract values in Pandas value_counts() with a score of 94.09%", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 4, "text": "```dataframe[column].value_counts().index.tolist()\n['apple', 'sausage', 'banana', 'cheese']\n```", "isBot": true, "highlightedText": "", "score": "94.09%"}, {"id": 5, "text": "3. Question: How to sum values of one column and group them by another column with a score of 94.06%", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 6, "text": "```In [11]: df.groupby(\"type\").sum()\nOut[11]:\n      qty\ntype\nA       6\nB       9\n```", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 7, "text": "4. Question: How to ensure get label for zero counts in python pandas pd.cut with a score of 93.93%", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 8, "text": "```In [11]: pd.value_counts(out).reindex(out.levels, fill_value=0)\nOut[11]: \n(0, 10]     3\n(10, 20]    1\n(20, 30]    0\ndtype: int64\n```", "isBot": true, "highlightedText": "", "score": "93.93%"}, {"id": 9, "text": "5. Question: calculate 95 percentile of the list values in python with a score of 93.78%", "isBot": true, "highlightedText": "", "score": "93.78%"}, {"id": 10, "text": "```import numpy as np\nfor i in finalvalues.values():\n    print np.percentile(map(int,i),95)\n```", "isBot": true, "highlightedText": "", "score": "93.78%"}, {"id": 11, "text": "6. Question: Indexing Row Values Based on Value of Each Column with a score of 93.75%", "isBot": true, "highlightedText": "", "score": "93.75%"}, {"id": 12, "text": "```>>> df / (df.iloc[0] / 100)\n   ColA ColB ColC\n0   100  100  100\n1   200  150  300\n```", "isBot": true, "highlightedText": "", "score": "93.75%"}, {"id": 13, "text": "7. Question: Calculate Numeric Value inside a String within a Pandas Column with a score of 93.73%", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 14, "text": "```vals = column_x.apply(lambda x: float(x.split('=')[1]))\nprint sum(vals <= 0.05) #number of rows with AF1000g=0.05 and less\nprint sum(vals >= 0.06) #number of rows with AF1000g=0.06 and greater\n```", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 15, "text": "8. Question: Split a Pandas Dataframe into multiple smaller dataframes based on empty rows with a score of 93.70%", "isBot": true, "highlightedText": "", "score": "93.70%"}, {"id": 16, "text": "```df['counter'] = (df['Header1'] == \"''\").cumsum()\ndf = df[df['Header1'] != \"''\"]  # remove empty rows\ndf.groupby('counter').apply(lambda df: df.iloc[0])\n```", "isBot": true, "highlightedText": "", "score": "93.70%"}, {"id": 17, "text": "9. Question: Plotting multiindex pandas DataFrame with matplotlib with a score of 93.60%", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 18, "text": "```for idx, val in enumerate(df.count):\n    print val\n\n    # Get the index of this row\n    d = df.iloc[idx].name\n```", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 19, "text": "10. Question: Using Python's max to return two equally large values with a score of 93.60%", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 20, "text": "```count = { 'a': 120, 'b': 120, 'c': 100 }\n\nhighest = max(count.values())\n\nprint [k for k,v in count.items() if v == highest]\n```", "isBot": true, "highlightedText": "", "score": "93.60%"}, {"id": 21, "text": "I classified your question with the following intent: code_search And found these entities: 75: query, all entries: rating, numerical: query", "isBot": true}, {"id": 22, "text": "How can I append new rows to a dataframe based on streaming data?", "isBot": false, "highlightedText": "How can I append <span class=\"entity-response\">new<span class=\"label\">[response]</span></span> rows to a <span class=\"entity-data_structure\">dataframe<span class=\"label\">[data_structure]</span></span> based on streaming data?", "intent": "code_search"}, {"id": 23, "text": "1. Question: how to convert a list of list of dictionaries into a single panda dataframe? with a score of 94.84%", "isBot": true, "highlightedText": "", "score": "94.84%"}, {"id": 24, "text": "```frames=[]\nfor row in self.rowResults:\n    frames.append(pandas.DataFrame(row))\nself.results = pandas.concat(frames)\n```", "isBot": true, "highlightedText": "", "score": "94.84%"}, {"id": 25, "text": "2. Question: pandas not saving content of table into csv with a score of 94.54%", "isBot": true, "highlightedText": "", "score": "94.54%"}, {"id": 26, "text": "```def create_data(self):\n    mydf = pd.DataFrame(columns=<some header>)\n    data = []\n    for i in xrange(0, 10):\n        data = something\n        mydf = mydf.append(data)\n    return mydf \n```", "isBot": true, "highlightedText": "", "score": "94.54%"}, {"id": 27, "text": "3. Question: Write data if it matches a criterion with a score of 94.31%", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 28, "text": "```df_datafile = pd.read_csv('data.csv')\nfor row, data in df_datafile.iterrows():\n    data.dropna().to_frame().transpose().to_csv('file_{}.csv'.format(row))\n```", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 29, "text": "4. Question: Creating a zero-filled pandas data frame with a score of 94.31%", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 30, "text": "```d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)\n```", "isBot": true, "highlightedText": "", "score": "94.31%"}, {"id": 31, "text": "5. Question: Python pandas creating data frame with variable number of inputs with a score of 94.21%", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 32, "text": "```def variableDataFrame(*args):\n    \"\"\"I'm assuming the last argument is the data argument.\n    Everything else gets put into an index.\n    If you want these as columns instead of rows,\n    put a \".T\" at the end of the return argument.\"\"\"\n\n    return pd.DataFrame(args[-1], index=pd.MultiIndex.from_arrays(args[:-1]))\n\n    # Optional return if you want columns instead\n    # return pd.DataFrame(args[-1], index=pd.MultiIndex.from_arrays(args[:-1])).T\n```", "isBot": true, "highlightedText": "", "score": "94.21%"}, {"id": 33, "text": "6. Question: How to efficiently unfold a date range span in Pandas? with a score of 94.15%", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 34, "text": "```import pandas as pd\ndef full_data(dataframe):\n    allframes = []\n    for i in dataframe.index:\n        newframe = pd.DataFrame()\n        newframe['dates'] = pd.date_range(dataframe.iloc[i].start, dataframe.iloc[i].end, freq = 'D')\n        newframe['name'] = dataframe.iloc[i]['name']\n        newframe['address'] = dataframe.iloc[i]['address']            \n        allframes.append(newframe)\n    return concat(allframes)\n```", "isBot": true, "highlightedText": "", "score": "94.15%"}, {"id": 35, "text": "7. Question: Extracting data from two dataframes to create a third with a score of 94.11%", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 36, "text": "```>>> pd.DataFrame(\n    df1.as_matrix() * df3.as_matrix() + df1.as_matrix() * (1 - df3.as_matrix()),\n    index=df1.index,\n    columns=df1.columns)\n```", "isBot": true, "highlightedText": "", "score": "94.11%"}, {"id": 37, "text": "8. Question: Creating a panda DataFrame from dictionary with multiple keys and value (list) of different lengths with a score of 94.07%", "isBot": true, "highlightedText": "", "score": "94.07%"}, {"id": 38, "text": "```import pandas as pd \ndataframe1 = pd.DataFrame(dict([(k,pd.Series(v)) for k,v in my_dict.iteritems()]))  \n```", "isBot": true, "highlightedText": "", "score": "94.07%"}, {"id": 39, "text": "9. Question: pandas.DataFrame.from_dict not preserving order using OrderedDict with a score of 94.06%", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 40, "text": "```# ... all your data collection\ndf = pd.DataFrame(data, columns=data.keys())\n```", "isBot": true, "highlightedText": "", "score": "94.06%"}, {"id": 41, "text": "10. Question: Combine a list of pandas dataframes to one pandas dataframe with a score of 93.95%", "isBot": true, "highlightedText": "", "score": "93.95%"}, {"id": 42, "text": "```import pandas as pd\ndf = pd.concat(list_of_dataframes)\n```", "isBot": true, "highlightedText": "", "score": "93.95%"}, {"id": 43, "text": "I classified your question with the following intent: code_search And found these entities: new: response, dataframe: data_structure", "isBot": true}, {"id": 44, "text": "How can I read csv files with custom header?", "isBot": false, "highlightedText": "How can I <span class=\"entity-operation\">read<span class=\"label\">[operation]</span></span> <span class=\"entity-data_structure\">csv files<span class=\"label\">[data_structure]</span></span> with <span class=\"entity-response\">custom<span class=\"label\">[response]</span></span> header?", "intent": "code_concept"}, {"id": 45, "text": "1. Question: Processing one row of a csv file with a score of 96.63%", "isBot": true, "highlightedText": "", "score": "96.63%"}, {"id": 46, "text": "```with open('your_file.csv') as f:\n    reader = csv.reader(f)\n    header = next(reader)\n```", "isBot": true, "highlightedText": "", "score": "96.63%"}, {"id": 47, "text": "2. Question: How to include headers into a csv file with a score of 96.58%", "isBot": true, "highlightedText": "", "score": "96.58%"}, {"id": 48, "text": "```import csv\nmyHeaders = [\"Header1\", \"Header2\"]\ncsvData = []\nwith open( 'myfile.csv','r+b' ) as csvfile:\n    # Read the data\n    reader = csv.reader(csvfile, quoting=csv.QUOTE_NONE)\n    writer = csv.writer(csvfile)\n    writer.writerow(myHeaders)\n    writer.writerows([row for row in reader])\n```", "isBot": true, "highlightedText": "", "score": "96.58%"}, {"id": 49, "text": "3. Question: Is there a more efficient way to load 10,000 excel rows into python? with a score of 96.25%", "isBot": true, "highlightedText": "", "score": "96.25%"}, {"id": 50, "text": "```from csv import reader as csv_reader\n\nwith open(\"data.csv\", \"r\") as fd:\n    for row in csv_reader(fd):\n        userid, firstname, lastname = row\n```", "isBot": true, "highlightedText": "", "score": "96.25%"}, {"id": 51, "text": "4. Question: Ruby or Python for heavy import script? with a score of 96.19%", "isBot": true, "highlightedText": "", "score": "96.19%"}, {"id": 52, "text": "```import csv\nwith open('csvfile.csv', 'rb') as source:\n    rdr= csv.reader( source )\n    for row in rdr:\n        # do whatever with row\n```", "isBot": true, "highlightedText": "", "score": "96.19%"}, {"id": 53, "text": "5. Question: python reading specific lines from CSV using list comprehension with a score of 96.04%", "isBot": true, "highlightedText": "", "score": "96.04%"}, {"id": 54, "text": "```import csv\nwith open(\"your/file.csv\", ...) as source:\n    reader = csv.reader(source, delimiter='\\t')\n    selection = [row for row in reader if row[2] == 'a']\n```", "isBot": true, "highlightedText": "", "score": "96.04%"}, {"id": 55, "text": "6. Question: Search a csv for a string and save that column with a score of 96.03%", "isBot": true, "highlightedText": "", "score": "96.03%"}, {"id": 56, "text": "```import csv\ncolumns = []                        #save the columns in this list\nwith open('myfile.csv','r') as f:\n reader = csv.reader(f, delimiter='\\t')\n ind = next(reader).index('Default')   #find the index of 'Default' in the header\n for row in reader:\n     columns.append(row[ind])\n```", "isBot": true, "highlightedText": "", "score": "96.03%"}, {"id": 57, "text": "7. Question: What is the easiest way to read the text file delimited by tab in python? with a score of 95.99%", "isBot": true, "highlightedText": "", "score": "95.99%"}, {"id": 58, "text": "```import csv\nwith open ('data.txt', 'r') as f:\n    first_column = [row[0] for row in csv.reader(f,delimiter='\\t')]\n    print (first_column[1:])\n```", "isBot": true, "highlightedText": "", "score": "95.99%"}, {"id": 59, "text": "8. Question: create table using python objects with a score of 95.97%", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 60, "text": "```import csv\nfile_ptr = open('filename.csv','r');\nfields = range(0, total number of columns in file header)\nfile_data = csv.DictReader(file_ptr, fields, delimiter=',')\nfor data in file_data:\n   print data\n   # data will be in dict format and first line would be all your headers,else are column data\n   # here, database query and code processing \n```", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 61, "text": "9. Question: Python Pandas read_csv reads only single line from CSV file with a score of 95.97%", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 62, "text": "```csv_f = pd.read_csv('test.csv', header=None) \nprint csv_f\n```", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 63, "text": "10. Question: Reading specific Column Values from CSV and pass it to urllib as parameter in Python with a score of 95.97%", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 64, "text": "```import csv\nwith open('test.csv','r') as csvFile:\n    reader=csv.reader(csvFile,delimiter=',')\n    reader.next()   # if you don't want to print columns headers\n    for row in reader:\n         print row[2]\ncsvFile.close()\n```", "isBot": true, "highlightedText": "", "score": "95.97%"}, {"id": 65, "text": "I classified your question with the following intent: code_concept And found these entities: read: operation, csv files: data_structure, custom: response", "isBot": true}], "2023-05-16T21:36:48.432737": [{"id": 0, "text": "Hello there, my name is Snippetsage, I can help you find code snippets. What are you looking for?", "isBot": true, "highlightedText": "", "intent": "", "liked": false, "disliked": false}, {"id": 0, "text": "How do I tokenize a sentence using NLTK?", "isBot": false, "highlightedText": "How do I <span class=\"entity-operation\">tokenize a<span class=\"label\">[operation]</span></span> <span class=\"entity-operation\">sentence<span class=\"label\">[operation]</span></span> <span class=\"entity-feature\">using NLTK<span class=\"label\">[feature]</span></span>?", "intent": "code_example"}, {"id": 1, "text": "1. Question: How to split a sentence in Python? with a score of 96.85%", "isBot": true, "highlightedText": "", "score": "96.85%"}, {"id": 2, "text": "```tokens = nltk.word_tokenize(sentence)\n```", "isBot": true, "highlightedText": "", "score": "96.85%", "liked": true, "disliked": false}, {"id": 3, "text": "2. Question: issue recognizing NEs with StanfordNER in python NLTK with a score of 95.54%", "isBot": true, "highlightedText": "", "score": "95.54%"}, {"id": 4, "text": "```alltext = myfile.read()\ntokenized_sentences = nltk.word_tokenize(alltext)\n```", "isBot": true, "highlightedText": "", "score": "95.54%", "liked": true, "disliked": false}, {"id": 5, "text": "3. Question: What's the most efficient way to filter values out of a list based on the values in another list with a score of 94.53%", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 6, "text": "```res = [word for word in simpleTokenize(string) if word not in stopwords]\n```", "isBot": true, "highlightedText": "", "score": "94.53%"}, {"id": 7, "text": "4. Question: Extract non-content English language words string - python with a score of 94.39%", "isBot": true, "highlightedText": "", "score": "94.39%"}, {"id": 8, "text": "```from nltk.corpus import stopwords\nmy_stop_words = stopwords.words('english')\n```", "isBot": true, "highlightedText": "", "score": "94.39%"}, {"id": 9, "text": "5. Question: NLTK WordNet Lemmatizer - How to remove the unknown words? with a score of 94.33%", "isBot": true, "highlightedText": "", "score": "94.33%"}, {"id": 10, "text": "```from nltk.tokenize import WordPunctTokenizer\nfrom nltk.corpus import wordnet\n\nmy_list_of_strings = []  # populate list before using\n\nwpt = WordPunctTokenizer()\nonly_recognized_words = []\n\nfor s in my_list_of_strings:\n    tokens = wpt.tokenize(s)\n    if tokens:  # check if empty string\n        for t in tokens:\n            if wordnet.synsets(t):\n                only_recognized_words.append(t)  # only keep recognized words\n```", "isBot": true, "highlightedText": "", "score": "94.33%"}, {"id": 11, "text": "6. Question: How to find common phrases from a text document with a score of 94.16%", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 12, "text": "```with open('MkXVM6ad9nI.txt') as wordfile:\n    text = wordfile.read)\n\ntokens = nltk.wordpunct_tokenize(text)\nfinder = BigramCollocationFinder.from_words(tokens)\n```", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 13, "text": "7. Question: Extracting only meaningful text from webpages with a score of 94.16%", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 14, "text": "```>>> from nltk.corpus import stopwords\n>>> sw = set(stopwords.words('english'))\n>>> sentence = \"a long sentence that contains a for instance\"\n>>> [w for w in sentence.split() if w not in sw]\n['long', 'sentence', 'contains', 'instance']\n```", "isBot": true, "highlightedText": "", "score": "94.16%"}, {"id": 15, "text": "8. Question: Detect English verb tenses using NLTK with a score of 93.90%", "isBot": true, "highlightedText": "", "score": "93.90%"}, {"id": 16, "text": "```len([phrase for phrase in nltk.Chunker(sentence) if phrase[1] == 'VP'])\n```", "isBot": true, "highlightedText": "", "score": "93.90%"}, {"id": 17, "text": "9. Question: How do I create my own NLTK text from a text file? with a score of 93.73%", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 18, "text": "```f=open('my-file.txt','rU')\nraw=f.read()\ntokens = nltk.word_tokenize(raw)\ntext = nltk.Text(tokens)\n```", "isBot": true, "highlightedText": "", "score": "93.73%"}, {"id": 19, "text": "10. Question: python: modify PerceptronTagger in nltk to recognize 'and/or' with a score of 93.69%", "isBot": true, "highlightedText": "", "score": "93.69%"}, {"id": 20, "text": "```for sentence in tagged_sentences:\n    for n, (word,tag) in enumerate(sentence):\n        if word == 'and/or':\n            sentence[n] = (word, \"CC\")\n```", "isBot": true, "highlightedText": "", "score": "93.69%"}, {"id": 21, "text": "I classified your question with the following intent: code_example And found these entities: tokenize a: operation, sentence: operation, using NLTK: feature", "isBot": true}, {"id": 22, "text": "How do I retrieve triplets from a list of strings?", "isBot": false, "highlightedText": "How do I <span class=\"entity-operation\">retrieve triplets from a list<span class=\"label\">[operation]</span></span> of <span class=\"entity-data_structure\">strings<span class=\"label\">[data_structure]</span></span>?", "intent": "code_concept"}, {"id": 23, "text": "1. Question: Use tuples/lists as array indices (Python) with a score of 94.24%", "isBot": true, "highlightedText": "", "score": "94.24%"}, {"id": 24, "text": "```matrx = [ [1,2,3], [4,5,6] ]\n\ndef LookupByTuple(tupl):\n    answer = matrx\n    for i in tupl:\n        answer = answer[i]\n    return answer\n\nprint LookupByTuple( (1,2) )\n```", "isBot": true, "highlightedText": "", "score": "94.24%"}, {"id": 25, "text": "2. Question: Create a tuple from a string and a list of strings with a score of 93.78%", "isBot": true, "highlightedText": "", "score": "93.78%"}, {"id": 26, "text": "```my_tuple = tuple([my_string] + my_list)\n```", "isBot": true, "highlightedText": "", "score": "93.78%"}, {"id": 27, "text": "3. Question: Have a list of tuples with strings, want to turn into a single string in Python with a score of 93.77%", "isBot": true, "highlightedText": "", "score": "93.77%"}, {"id": 28, "text": "```''.join(t[0] for t in tuples)\n```", "isBot": true, "highlightedText": "", "score": "93.77%"}, {"id": 29, "text": "4. Question: Python - Most efficient way to find how often each possible pair of words occurs in the same line in a text file? with a score of 93.72%", "isBot": true, "highlightedText": "", "score": "93.72%"}, {"id": 30, "text": "```from collections import defaultdict\nimport itertools as it\nimport re\n\npairs = defaultdict(int)\n\nfor line in lines:\n    for pair in it.combinations(re.findall('\\w+', line), 2):\n        pairs[tuple(pair)] += 1\n\nresultList = [pair + (occurences, ) for pair, occurences in pairs.iterkeys()]\n```", "isBot": true, "highlightedText": "", "score": "93.72%", "liked": true, "disliked": false}, {"id": 31, "text": "5. Question: Assigning comma separated strings to an array of tuples - python, numpy with a score of 93.58%", "isBot": true, "highlightedText": "", "score": "93.58%"}, {"id": 32, "text": "```[tuple(x.split(',')) for x in a]\n```", "isBot": true, "highlightedText": "", "score": "93.58%"}, {"id": 33, "text": "6. Question: Read relations from file using igraph python with a score of 93.37%", "isBot": true, "highlightedText": "", "score": "93.37%"}, {"id": 34, "text": "```def iterpairs(iterable):\n    prev = None\n    for item in iterable:\n        if prev is not None:\n            yield prev, item\n        prev = item\n\nedges = []\nfor line in open(\"sample.txt\", \"r\"):\n    parts = line.strip().split()\n    edges.extend(iterpairs(parts))\n\ng = Graph.TupleList(edges)\n```", "isBot": true, "highlightedText": "", "score": "93.37%", "liked": true, "disliked": false}, {"id": 35, "text": "7. Question: Subsets of a tuple with a score of 93.34%", "isBot": true, "highlightedText": "", "score": "93.34%"}, {"id": 36, "text": "```input_tuple = (\"A\", \"b\", \"C\", \"d\")\noutput_tuples = []\nfor subtuple_length in reversed(xrange(1, len(input_tuple))):\n    for start_index in xrange(0, (len(input_tuple) + 1 - subtuple_length)):\n        output_tuples.append(input_tuple[start_index:start_index + subtuple_length])\n```", "isBot": true, "highlightedText": "", "score": "93.34%"}, {"id": 37, "text": "8. Question: Modify each element in a list with a score of 93.28%", "isBot": true, "highlightedText": "", "score": "93.28%"}, {"id": 38, "text": "```for index, (val_1, val_2) in enumerate(list_of_tuples):\n    # do stuff\n    val_3 = # something\n    list_of_tuples[index] = (val_1, val_2, val_3)\n```", "isBot": true, "highlightedText": "", "score": "93.28%"}, {"id": 39, "text": "9. Question: How to each item in list with all values of another list in Python with a score of 93.22%", "isBot": true, "highlightedText": "", "score": "93.22%"}, {"id": 40, "text": "```resultlist=[]\nfor i in snipppets1:\n for j in snippets2:\n  resultlist.append(i+j)\nprint resultlist\n```", "isBot": true, "highlightedText": "", "score": "93.22%"}, {"id": 41, "text": "10. Question: Joining a set of ordered-integer yielding Python iterators with a score of 93.18%", "isBot": true, "highlightedText": "", "score": "93.18%"}, {"id": 42, "text": "```import heapq, itertools\ndef intersect(*its):\n    for key, values in itertools.groupby(heapq.merge(*its)):\n    \tif len(list(values)) == len(its):\n    \t\tyield key\n\n>>> list(intersect(*postings))\n[100, 322]\n```", "isBot": true, "highlightedText": "", "score": "93.18%"}, {"id": 43, "text": "I classified your question with the following intent: code_concept And found these entities: retrieve triplets from a list: operation, strings: data_structure", "isBot": true}, {"id": 44, "text": "How to retrieve entities from a string using Spacy?", "isBot": false, "highlightedText": "How to retrieve <span class=\"entity-operation\">entities<span class=\"label\">[operation]</span></span> from <span class=\"entity-operation\">a string<span class=\"label\">[operation]</span></span> using <span class=\"entity-proglanguage\">Spacy<span class=\"label\">[proglanguage]</span></span>?", "intent": "code_search"}, {"id": 45, "text": "1. Question: Search for latest record using search by id and search by object with a score of 92.55%", "isBot": true, "highlightedText": "", "score": "92.55%"}, {"id": 46, "text": "```You can try following options:\n\n# Get Entity by ID/Object\n\nfrom bson.objectid import ObjectID\n\ndef getEntityByID(self, id):\n    obj_id = ObjectID(str(id))\n    collect = self.collection.find({'_id':obj_id})\n    return collect\n\n# Get latest entity\ndef getLatestEntity(self, search_json, sort_by='_id'):\n    collect = self.collection.find(search_json).sort([(sort_by, -1)]).limit(1)\n    return collect\n```", "isBot": true, "highlightedText": "", "score": "92.55%"}, {"id": 47, "text": "2. Question: How to parse broken XML in Python? with a score of 92.23%", "isBot": true, "highlightedText": "", "score": "92.23%"}, {"id": 48, "text": "```import htmlentitydefs as ents\nfrom lxml import etree  # or maybe 'html' , if the input is still more broken\ndef repl_ent(m): \n     return ents.entitydefs[m.group()[1:-1]]\ngoodxml = re.sub( '&\\w+;', repl_ent, badxml )\netree.fromstring( goodxml )\n```", "isBot": true, "highlightedText": "", "score": "92.23%"}, {"id": 49, "text": "3. Question: python global object cache with a score of 92.10%", "isBot": true, "highlightedText": "", "score": "92.10%"}, {"id": 50, "text": "```_entities = []\nclass entity(object):\n    @staticmethod\n    def get_entity_registry(): \n         return _entities\n```", "isBot": true, "highlightedText": "", "score": "92.10%"}, {"id": 51, "text": "4. Question: Find class being queried on from custom Query class in SQLAlchemy? with a score of 92.00%", "isBot": true, "highlightedText": "", "score": "92.00%"}, {"id": 52, "text": "```class BaseQuery(Query):\n    def fulltext(self, terms):\n        # assuming query is always created with `cls.query` or `DBSession.query(cls)`\n        cls = self._entities[0].type\n        ...\n```", "isBot": true, "highlightedText": "", "score": "92.00%"}, {"id": 53, "text": "5. Question: How To Deal With Un-Format Json Data In Python? with a score of 91.78%", "isBot": true, "highlightedText": "", "score": "91.78%"}, {"id": 54, "text": "```import re\n\na_pattern = re.compile(\"query\\:(.+?)\\,\")\nre.findall(a_pattern, 'query:text_you_want_to_extract,')\n```", "isBot": true, "highlightedText": "", "score": "91.78%"}, {"id": 55, "text": "6. Question: Serialize an entity key to a string in Python for GAE with a score of 91.73%", "isBot": true, "highlightedText": "", "score": "91.73%"}, {"id": 56, "text": "```from google.appengine.ext import db\n#...\nobj_key = db.Key.from_path('EntityClass', id_or_name)\nobj = db.get(obj_key)\n```", "isBot": true, "highlightedText": "", "score": "91.73%"}, {"id": 57, "text": "7. Question: searching all fields in a table in django with a score of 91.60%", "isBot": true, "highlightedText": "", "score": "91.60%"}, {"id": 58, "text": "```from django.db.models import CharField\nfrom django.db.models import  Q\n\nfields = [f for f in table._meta.fields if isinstance(f, CharField)]\nqueries = [Q(**{f.name: SEARCH_TERM}) for f in fields]\n\nqs = Q()\nfor query in queries:\n    qs = qs | query\n\ntable.objects.filter(qs)\n```", "isBot": true, "highlightedText": "", "score": "91.60%"}, {"id": 59, "text": "8. Question: Elegant way to safely .text.strip() in BeautifulSoup? with a score of 91.45%", "isBot": true, "highlightedText": "", "score": "91.45%"}, {"id": 60, "text": "```def find_stripped(soup, what):\n  found = soup.find(what)\n  if found != None:\n    return found.text.strip()\n  # maybe:\n  # return \"\"\n```", "isBot": true, "highlightedText": "", "score": "91.45%"}, {"id": 61, "text": "9. Question: How can I get the ndb.Model when my only input is an ndb.Query? with a score of 91.44%", "isBot": true, "highlightedText": "", "score": "91.44%"}, {"id": 62, "text": "```def query_to_model(query):\n  return ndb.Model._kind_map[query.name]\n```", "isBot": true, "highlightedText": "", "score": "91.44%"}, {"id": 63, "text": "10. Question: Regex in Pymongo with a score of 91.44%", "isBot": true, "highlightedText": "", "score": "91.44%"}, {"id": 64, "text": "```def search(db, col, search_text):\n    if(not search_text ):\n        return \"\";\n    else:\n        search_text = str(search_text)\n    query = col.find({})\n    results = []\n    for result in query:\n        if(str(result.values()).find(search_text)>=0):\n            results.append(result)\n```", "isBot": true, "highlightedText": "", "score": "91.44%"}, {"id": 65, "text": "I classified your question with the following intent: code_search And found these entities: entities: operation, a string: operation, Spacy: proglanguage", "isBot": true}, {"id": 66, "text": "How to get all patient records above a certain age from a database?", "isBot": false, "highlightedText": ""}]}